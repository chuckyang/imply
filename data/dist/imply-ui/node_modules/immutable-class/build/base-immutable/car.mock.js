"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var base_immutable_1 = require("./base-immutable");
var Driver = (function (_super) {
    tslib_1.__extends(Driver, _super);
    function Driver(params) {
        return _super.call(this, params) || this;
    }
    Driver.fromJS = function (params) {
        return new Driver(base_immutable_1.BaseImmutable.jsToValue(Driver.PROPERTIES, params));
    };
    Driver.PROPERTIES = [
        { name: 'name', defaultValue: null }
    ];
    return Driver;
}(base_immutable_1.BaseImmutable));
exports.Driver = Driver;
base_immutable_1.BaseImmutable.finalize(Driver);
Driver.POPE = Driver.fromJS({ name: 'the pope' });
function ensureNonNegative(n) {
    if (n < 0)
        throw new Error('must non negative positive');
}
var Car = (function (_super) {
    tslib_1.__extends(Car, _super);
    function Car(properties) {
        return _super.call(this, properties) || this;
    }
    Car.isCar = function (car) {
        return car instanceof Car;
    };
    Car.fromJS = function (properties) {
        return new Car(base_immutable_1.BaseImmutable.jsToValue(Car.PROPERTIES, properties, Car.BACK_COMPATS));
    };
    Car.prototype.getSubCar = function () {
        var _a = this, name = _a.name, subCar = _a.subCar;
        if (subCar)
            return subCar;
        if (name === 'ford')
            return Car.fromJS({ name: 'pinto', fuel: 'gas' });
        if (name === 'toyota')
            return Car.fromJS({ name: 'prius', fuel: 'electric' });
        return null;
    };
    Car.prototype.changeRange = function (n) {
        var value = this.valueOf();
        var fuel = value.fuel;
        if (fuel === 'electric') {
            value.range = n > 400 ? 400 : n;
            return new Car(value);
        }
        if (fuel === 'diesel') {
            value.range = n > 2000 ? 2000 : n;
            return new Car(value);
        }
        value.range = n;
        return new Car(value);
    };
    Car.PROPERTIES = [
        {
            name: 'name',
            validate: function (n) {
                if (n.toLowerCase() !== n)
                    throw new Error('must be lowercase');
            }
        },
        {
            name: 'fuel',
            defaultValue: 'electric',
            possibleValues: ['gas', 'diesel', 'electric']
        },
        {
            name: 'subCar',
            defaultValue: null,
            immutableClass: Car
        },
        {
            name: 'range',
            defaultValue: 100,
            validate: [base_immutable_1.BaseImmutable.ensure.number, ensureNonNegative]
        },
        {
            name: 'relatedCars',
            defaultValue: [],
            immutableClassArray: Car
        },
        {
            name: 'createdOn',
            defaultValue: null,
            type: base_immutable_1.PropertyType.DATE
        },
        {
            name: 'owners',
            defaultValue: null,
            emptyArrayIsOk: true
        },
        {
            name: 'driver',
            defaultValue: Driver.POPE,
            immutableClass: Driver
        }
    ];
    Car.BACK_COMPATS = [
        {
            condition: function (js) {
                return js.fuelType;
            },
            action: function (js) {
                js.fuel = js.fuelType;
            }
        }
    ];
    return Car;
}(base_immutable_1.BaseImmutable));
exports.Car = Car;
base_immutable_1.BaseImmutable.finalize(Car);
