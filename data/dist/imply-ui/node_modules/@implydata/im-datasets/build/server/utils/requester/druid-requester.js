"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");var request=require("request-promise-native");var promise_timeout_1=require("promise-timeout");var beltful_1=require("@implydata/beltful");var imply_ui_common_1=require("@implydata/imply-ui-common");var error_1=require("../error/error");var task_1=require("../../../common/models/task/task");var dataset_1=require("../../../common/models/dataset/dataset");var column_definition_1=require("../../../common/models/column-definition/column-definition");var debug_1=require("../debug/debug");var PlainAgent=require("socks5-http-client/lib/Agent");var SecureAgent=require("socks5-https-client/lib/Agent");var plywood_druid_requester_1=require("plywood-druid-requester");var supervisor_1=require("../../../common/models/supervisor/supervisor");var general_1=require("../../../common/utils/general/general");function getDataSourcesForConnections(request){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var logger,body,connectionActions,priorities,requesters,e_1,datasourcePromises,dataSourcess;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:logger=request.logger,body=request.body,connectionActions=request.connectionActions;priorities=body.priorities;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,connectionActions.getDruidRequestersForConnections(request)];case 2:requesters=_a.sent();return[3,4];case 3:e_1=_a.sent();logger.log("Could not load requesters for datasources: "+e_1.message);return[2,[]];case 4:datasourcePromises=requesters.map(function(requester){return tslib_1.__awaiter(_this,void 0,void 0,function(){var e_2;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);return[4,requester.getDataSourcesForConnection(request,priorities?priorities.filter(function(p){return p.connectionName===requester.connection.name}):null)];case 1:return[2,_a.sent()];case 2:e_2=_a.sent();return[2,e_2];case 3:return[2]}})})});return[4,Promise.all(datasourcePromises)];case 5:dataSourcess=_a.sent();if(dataSourcess.every(function(d){return d instanceof Error})){throw dataSourcess[0]}return[2,[].concat.apply([],dataSourcess).filter(function(d){return d instanceof dataset_1.Dataset})]}})})}exports.getDataSourcesForConnections=getDataSourcesForConnections;function dataSourceIsDropForever(rules){return rules.length===1&&rules[0].type==="dropForever"}var debug=false;function mapSupervisorsToTasks(logger,statuses){if(statuses===void 0){statuses=[]}var taskIdToSupervisorId={};statuses.filter(Boolean).map(function(status){var activeTasks=status.payload?status.payload.activeTasks:[];activeTasks.forEach(function(task){taskIdToSupervisorId[task.id]=status.id})});return taskIdToSupervisorId}var DruidClusterRequester=function(){function DruidClusterRequester(params,authToken){var connection=params.connection,decorators=params.decorators,logger=params.logger,maxQueries=params.maxQueries;var druidRequestDecorator=null;if(connection.decorator){if(!decorators)throw new Error("must have decorators");var druidRequestDecoratorModule=decorators.getDecoratorModule(connection.decorator);if(!druidRequestDecoratorModule)throw new Error("decorator '"+connection.decorator+"' not found");druidRequestDecorator=druidRequestDecoratorModule.druidRequestDecoratorFactory(logger,{options:connection.decoratorOptions||{},connection:connection})}this.maxQueries=maxQueries;this.countQueries=0;this.connection=connection;this.factoryOptions={requestDecorator:druidRequestDecorator,authToken:authToken}}DruidClusterRequester.prototype.getHTTPProtocol=function(){var secure=this.connection.secure();return secure?"https":"http"};DruidClusterRequester.prototype.getOverlordPort=function(){return this.connection.secure()?imply_ui_common_1.Connection.PLAINTEXT_OVERLORD_PORT+200:imply_ui_common_1.Connection.PLAINTEXT_OVERLORD_PORT};DruidClusterRequester.prototype.getQueryPort=function(){return this.connection.secure()?imply_ui_common_1.Connection.PLAINTEXT_QUERY_PORT+200:imply_ui_common_1.Connection.PLAINTEXT_QUERY_PORT};DruidClusterRequester.prototype.getCoordinatorPort=function(){return this.connection.secure()?imply_ui_common_1.Connection.PLAINTEXT_COORDINATOR_PORT+200:imply_ui_common_1.Connection.PLAINTEXT_COORDINATOR_PORT};DruidClusterRequester.prototype.getOverlordURLs=function(){var overlordHosts=this.connection.overlordHosts;if(!overlordHosts)return[];var protocol=this.getHTTPProtocol();var port=this.getOverlordPort();return overlordHosts.map(function(h){return beltful_1.ImmutableURL.fromParts(h,protocol,port)})};DruidClusterRequester.prototype.getCoordinatorURLs=function(){var coordinatorHosts=this.connection.coordinatorHosts;if(!coordinatorHosts)return[];var protocol=this.getHTTPProtocol();var port=this.getCoordinatorPort();return coordinatorHosts.map(function(h){return beltful_1.ImmutableURL.fromParts(h,protocol,port)})};DruidClusterRequester.prototype.getQueryURLs=function(){var queryHosts=this.connection.queryHosts;if(!queryHosts)return[];var protocol=this.getHTTPProtocol();var port=this.getQueryPort();return queryHosts.map(function(h){return beltful_1.ImmutableURL.fromParts(h,protocol,port)})};DruidClusterRequester.prototype.request=function(opt,req,eventAttrs,context){if(eventAttrs===void 0){eventAttrs={}}if(context===void 0){context={}}return tslib_1.__awaiter(this,void 0,void 0,function(){var _a,maxQueries,countQueries,from,requestId,tracker,body,_b,factoryOptions,connection,locator,host,protocol,urlBuilder,requestDecorator,authToken,event,myDbAuthToken,secure,decorationPromise,rq,startTime;return tslib_1.__generator(this,function(_c){switch(_c.label){case 0:_a=this,maxQueries=_a.maxQueries,countQueries=_a.countQueries;from=req.user,requestId=req.requestId,tracker=req.tracker,body=req.body;_b=this,factoryOptions=_b.factoryOptions,connection=_b.connection;locator=factoryOptions.locator,host=factoryOptions.host,protocol=factoryOptions.protocol,urlBuilder=factoryOptions.urlBuilder,requestDecorator=factoryOptions.requestDecorator,authToken=factoryOptions.authToken;if(countQueries>maxQueries){req.logger.debug("Max queries of "+maxQueries+" reached. Not querying: "+opt.url);return[2,Promise.resolve(null)]}this.countQueries=countQueries+1;if(!opt.method)opt.method="POST";event={type:eventAttrs&&eventAttrs["type"]?eventAttrs["type"]:"druid-request",metric:"query/time",user:from?{name:from.name,email:from.email}:null,attr:Object.assign({url:opt.url,method:opt.method,is_poll:!!body.isPoll},eventAttrs)};if(from&&from.accountId)event.attr.account_id=from.accountId;if(!protocol)protocol="plain";opt.headers=opt.headers||{};myDbAuthToken=authToken||connection.defaultDbAuthToken;if(myDbAuthToken){try{plywood_druid_requester_1.applyAuthTokenToHeaders(opt.headers,myDbAuthToken)}catch(e){req.logger.log("Could not apply auth token to headers "+e.message);return[2]}}secure=connection.secure();if(connection.socksHost){opt.agentClass=secure?SecureAgent:PlainAgent;opt.agentOptions={socksHost:connection.socksHost};if(connection.socksUsername)opt.agentOptions.socksUsername=connection.socksUsername;if(connection.socksPassword)opt.agentOptions.socksPassword=connection.socksPassword}if(secure){opt.strictSSL=protocol==="tls";if(connection.ca)opt.ca=connection.ca}if(!requestDecorator)return[3,2];decorationPromise=requestDecorator({method:opt.method,url:opt.url,query:JSON.parse(JSON.stringify(opt.json))},context["decoratorContext"]);if(!decorationPromise)return[3,2];return[4,Promise.resolve(decorationPromise).then(function(decoration){if(decoration){if(decoration.method){opt.method=decoration.method}if(decoration.url){opt.url=decoration.url}if(decoration.headers){Object.assign(opt.headers||{},decoration.headers)}if(decoration.query){if(typeof decoration.query==="string"){opt.body=decoration.query}else{opt.body=JSON.stringify(decoration.query)}}}})];case 1:_c.sent();_c.label=2;case 2:rq=request(opt);if(opt.agentClass&&opt.timeout){rq=promise_timeout_1.timeout(rq,opt.timeout)}startTime=Date.now();return[2,rq.then(function(value){event.attr.success="true";event.value=Date.now()-startTime;tracker.track(event);return value},function(e){event.attr.success="false";event.value=Date.now()-startTime;tracker.track(event);throw error_1.DatasetsError.fromError(e)})]}})})};DruidClusterRequester.prototype.druidRequest=function(opt,req,subType){return this.request(opt,req,{type:"druid-request",sub_type:subType})};DruidClusterRequester.prototype.tryRequestingMultipleHosts=function(options,hosts,req,subtype,debug,errors,skipIf){if(debug===void 0){debug=null}if(errors===void 0){errors=[]}if(skipIf===void 0){skipIf=function(s){return false}}return tslib_1.__awaiter(this,void 0,void 0,function(){var defaultOptions,myOptions,resp,e_3;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:defaultOptions={method:"POST",url:hosts[0].toString(),followAllRedirects:true,timeout:27e3};myOptions=Object.assign({},defaultOptions,options);_a.label=1;case 1:_a.trys.push([1,3,,5]);return[4,this.druidRequest(myOptions,req,subtype)];case 2:resp=_a.sent();if(debug){debug.log(defaultOptions.url+" returned "+JSON.stringify(resp,null,2))}return[2,resp];case 3:e_3=_a.sent();if(hosts.length<=1){req.logger.log("Could not request "+hosts[0]+": "+e_3.message+" with request options with request options: "+JSON.stringify(options));if(!errors.length&&!skipIf(e_3.message))throw new error_1.DatasetsError(e_3.message,e_3.code);throw new error_1.DatasetsError(e_3.message,500,errors.map(function(e){return e.message}).join(", "))}if(skipIf(e_3.message)){req.logger.log("Skipping because no point in trying other hosts "+e_3.message);return[2,Promise.resolve(null)]}errors.push(error_1.DatasetsError.fromError(e_3));req.logger.log("Could not request "+myOptions.url+" because "+e_3.message+": trying "+hosts[1]);return[4,this.tryRequestingMultipleHosts(options,hosts.slice(1),req,subtype,debug,errors)];case 4:return[2,_a.sent()];case 5:return[2]}})})};DruidClusterRequester.prototype.fillInDatasource=function(request,dsName,globalMetadatas,globalLoadInfos,lightVersion,supervisors){return tslib_1.__awaiter(this,void 0,void 0,function(){var connection,logger,stubDataSource,metadata,loadStatus,supervisor,dataSource,_a,_b,e_4;return tslib_1.__generator(this,function(_c){switch(_c.label){case 0:connection=this.connection;logger=request.logger;stubDataSource=dataset_1.Dataset.fromJS({name:dsName,connectionName:connection.name,connectionTitle:connection.title});metadata=globalMetadatas?globalMetadatas.filter(function(m){return m["TABLE_NAME"]===dsName}):null;loadStatus=globalLoadInfos?globalLoadInfos[dsName]:null;supervisor=supervisors?supervisors.find(function(s){return s.id===dsName}):null;_c.label=1;case 1:_c.trys.push([1,8,,9]);if(!!lightVersion)return[3,3];return[4,this.populateLastEvent(request,stubDataSource)];case 2:_a=_c.sent();return[3,4];case 3:_a=stubDataSource;_c.label=4;case 4:dataSource=_a;if(!!lightVersion)return[3,6];return[4,this.populateSegmentInfo(request,dataSource)];case 5:_b=_c.sent();return[3,7];case 6:_b=stubDataSource;_c.label=7;case 7:dataSource=_b;dataSource=this.populateDataSourceColumns(dataSource,metadata);dataSource=dataSource.changeSupervisor(supervisor);dataSource=dataSource.changeLoadStatus(loadStatus);return[2,dataSource];case 8:e_4=_c.sent();logger.warn("could not fill in datasource "+e_4.message);return[2,stubDataSource];case 9:return[2]}})})};DruidClusterRequester.prototype.populateLastEvent=function(request,dataSource){return tslib_1.__awaiter(this,void 0,void 0,function(){var connection,logger,dbAuthToken,decorators,log,timer,lastEventResp,result,e_5;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;logger=request.logger,dbAuthToken=request.dbAuthToken,decorators=request.decorators;log=debug?logger.log:function(s){};_a.label=1;case 1:_a.trys.push([1,3,,4]);log("Getting last event time for "+dataSource.name+", "+this.getQueryURLs());timer=debug_1.startTimer("last event time calculation for "+dataSource.name);return[4,this.getLastEvent(dataSource.name,request)];case 2:lastEventResp=_a.sent();timer.stop(log);if(!lastEventResp||!lastEventResp[0])return[2,dataSource];result=lastEventResp[0].result;return[2,dataSource.changeLastEventTime(new Date(result.maxIngestedEventTime))];case 3:e_5=_a.sent();logger.warn("Error getting "+dataSource.name+" last event time: "+e_5.message);return[2,dataSource];case 4:return[2]}})})};DruidClusterRequester.prototype.populateSegmentInfo=function(request,dataSource){return tslib_1.__awaiter(this,void 0,void 0,function(){var connection,logger,dbAuthToken,decorators,log,name_1,timer,intervalsResp_1,intervals,segments,size,e_6;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;logger=request.logger,dbAuthToken=request.dbAuthToken,decorators=request.decorators;log=debug?logger.log:function(s){};_a.label=1;case 1:_a.trys.push([1,3,,4]);name_1=dataSource.name;logger.debug("Getting intervals info for "+name_1);timer=debug_1.startTimer("intervals info calculation for "+name_1);return[4,this.getCoordinatorsIntervals(name_1,request)];case 2:intervalsResp_1=_a.sent();timer.stop(log);if(!intervalsResp_1){logger.log("Empty response for coordinator intervals");return[2,dataSource]}intervals=Object.keys(intervalsResp_1).map(function(i){return intervalsResp_1[i]});segments=intervals.map(function(a){return a.count}).reduce(function(a,b){return a+b},0);size=Object.keys(intervalsResp_1).map(function(a){return intervalsResp_1[a].size}).reduce(function(a,b){return a+b},0);return[2,dataSource.changeSize(size).changeIntervalCount(intervals.length).changeSegmentCount(segments)];case 3:e_6=_a.sent();logger.warn("Could not get last event time for cluster id: "+connection.name+", datasource: "+dataSource.name+": "+e_6.message);return[2,dataSource];case 4:return[2]}})})};DruidClusterRequester.prototype.populateDataSourceColumns=function(dataSource,metadatas){if(!metadatas)return dataSource;var cols=metadatas.map(function(value){return column_definition_1.ColumnDefinition.fromSegmentMetadata(value["COLUMN_NAME"],value)});return dataSource.changeColumns(cols)};DruidClusterRequester.prototype.getCoordinatorsIntervals=function(dataSource,req){var connection=this.connection;var baseURLs=this.getCoordinatorURLs();if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/datasources/"+dataSource+"/intervals").changeSearch("?simple")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"coordinatorIntervals")};DruidClusterRequester.prototype.getCoordinatorsServerInfo=function(req){var connection=this.connection;var baseURLs;try{baseURLs=this.getCoordinatorURLs()}catch(e){req.logger.log("Could not get coordinator hosts: "+e.message);return Promise.resolve(null)}if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/servers").changeSearch("?simple")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"coordinatorServers")};DruidClusterRequester.prototype.getCoordinatorsLoadStatus=function(req){var connection=this.connection;var baseURLs;try{baseURLs=this.getCoordinatorURLs()}catch(e){req.logger.log("Could not get coordinator hosts: "+e.message);return Promise.resolve(null)}if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/loadstatus")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"loadStatus")};DruidClusterRequester.prototype.getLastEvent=function(dataSource,req){var connection=this.connection;var baseURLs=this.getQueryURLs();if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/v2")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:{queryType:"dataSourceMetadata",dataSource:dataSource},agentOptions:agentOptions},urls,req,"queryDataSourceMetadata")};DruidClusterRequester.prototype.getSegmentMetadata=function(dataSource,req){var connection=this.connection;var baseURLs=this.getQueryURLs();if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/v2")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:{queryType:"segmentMetadata",dataSource:dataSource,analysisTypes:[],merge:true,lenientAggregatorMerge:true},agentOptions:agentOptions},urls,req,"querySegmentMetadata")};DruidClusterRequester.prototype.getAllSegmentMetadata=function(req){var connection=this.connection;var baseURLs=this.getQueryURLs();if(!baseURLs.length)return Promise.resolve(null);var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;var urls=baseURLs.map(function(h){return h.changePathname("/druid/v2/sql/")});return this.tryRequestingMultipleHosts({json:{query:"SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = 'druid'"},agentOptions:agentOptions},urls,req,"querySegmentMetadata")};DruidClusterRequester.prototype.getStatusInfo=function(req){var connection=this.connection;var baseURLs=this.getCoordinatorURLs().concat(this.getOverlordURLs()).concat(this.getQueryURLs());if(!baseURLs.length)return Promise.resolve(null);var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;var urls=baseURLs.map(function(h){return h.changePathname("/status")});return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"status")};DruidClusterRequester.prototype.getDataSourceNames=function(req){var connection=this.connection;var baseURLs=this.getQueryURLs();if(!baseURLs.length)return Promise.resolve(null);var urls=baseURLs.map(function(h){return h.changePathname("/druid/v2/datasources")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"queryDatasources")};DruidClusterRequester.prototype.sampleData=function(json,req){var connection=this.connection;var urls=this.getOverlordURLs().map(function(h){return h.changePathname("/druid/indexer/v1/parser")});if(!urls.length)return Promise.resolve(null);var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:json,agentOptions:agentOptions},urls,req,"sampleData")};DruidClusterRequester.prototype.getSupervisorStatus=function(supervisorId,req,skipIf){return tslib_1.__awaiter(this,void 0,void 0,function(){var connection,baseURLs,agentOptions,urls;return tslib_1.__generator(this,function(_a){connection=this.connection;try{baseURLs=this.getOverlordURLs();if(!baseURLs.length)return[2,Promise.resolve(null)]}catch(e){req.logger.log("Could not get overlord hosts for supervisor status: "+e.message);return[2,Promise.resolve(null)]}if(!baseURLs.length)return[2,Promise.resolve(null)];agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/supervisor/"+supervisorId+"/status")});return[2,this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"supervisorStatus",null,[],skipIf)]})})};DruidClusterRequester.prototype.getActiveSupervisorIds=function(req){var connection=this.connection;var baseURLs;try{baseURLs=this.getOverlordURLs()}catch(e){req.logger.log("Could not get overlord hosts for active supervisor ids: "+e.message);return Promise.resolve(null)}if(!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/supervisor")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"supervisorIds")};DruidClusterRequester.prototype.getAllSupervisorIds=function(req){var connection=this.connection;var baseURLs;try{baseURLs=this.getOverlordURLs()}catch(e){req.logger.log("Could not get overlord hosts for all supervisor ids: "+e.message);return Promise.resolve(null)}if(!baseURLs.length)return Promise.resolve({});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/supervisor/history")});return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"supervisorHistory")};DruidClusterRequester.prototype.postSupervisor=function(json,req){var connection=this.connection;var urls=this.getOverlordURLs().map(function(h){return h.changePathname("/druid/indexer/v1/supervisor")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:json,agentOptions:agentOptions},urls,req,"postSupervisor")};DruidClusterRequester.prototype.shutdownSupervisor=function(supervisorId,req){var connection=this.connection;var urls=this.getOverlordURLs().map(function(h){return h.changePathname("/druid/indexer/v1/supervisor/"+supervisorId+"/shutdown")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:true,agentOptions:agentOptions},urls,req,"shutdownSupervisor")};DruidClusterRequester.prototype.getAllTasks=function(request){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var connection,baseURLs,user,requestId,logger,taskPromises,taskss,e_7,flattened,seen;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;try{baseURLs=this.getOverlordURLs()}catch(e){request.logger.log("Could not get overlord hosts for getting tasks: "+e.message);return[2,Promise.resolve(null)]}user=request.user,requestId=request.requestId,logger=request.logger;if(!baseURLs||!baseURLs.length)return[2,Promise.resolve([])];taskPromises=Promise.all(["complete","running","waiting","pending"].map(function(status){return tslib_1.__awaiter(_this,void 0,void 0,function(){var urls,resp,agentOptions,e_8;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/"+status+"Tasks")});logger.debug("user: "+user.name+" requesting baseURLs: "+urls+" for "+status+"Tasks");agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,request,"getTasks"+status)];case 2:resp=_a.sent();return[3,4];case 3:e_8=_a.sent();logger.log("Could not get "+status+" tasks for "+connection.name+": "+e_8);return[2,[]];case 4:return[2,resp]}})})}));_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,taskPromises];case 2:taskss=_a.sent();return[3,4];case 3:e_7=_a.sent();logger.error("Could not get tasks: "+e_7.message);return[2,[]];case 4:flattened=[].concat.apply([],taskss.filter(Boolean));seen={};return[2,flattened.filter(function(task){var id=task.id;if(seen[id]){logger.log("Task: "+id+" already seen. Skipping.");return false}seen[id]=true;return true})]}})})};DruidClusterRequester.prototype.getTaskStatus=function(taskId,req){var connection=this.connection;var baseURLs=this.getOverlordURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/task/"+taskId+"/status")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"taskStatus")};DruidClusterRequester.prototype.getTaskPayload=function(taskId,req){var connection=this.connection;var baseURLs=this.getOverlordURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/task/"+taskId)});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"taskPayload").then(function(res){return res?res.payload:null})};DruidClusterRequester.prototype.getTaskLog=function(taskId,req,offset){var connection=this.connection;var baseURLs=this.getOverlordURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/task/"+taskId+"/log").changeSearch("?offset=-"+offset)});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",gzip:true,agentOptions:agentOptions},urls,req,"taskLog")};DruidClusterRequester.prototype.createTask=function(json,req){var connection=this.connection;var baseURLs=this.getOverlordURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/task")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:json,agentOptions:agentOptions},urls,req,"createTask")};DruidClusterRequester.prototype.shutdownTask=function(taskId,req){var connection=this.connection;var baseURLs=this.getOverlordURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/indexer/v1/task/"+taskId+"/shutdown")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:true,agentOptions:agentOptions},urls,req,"createTask")};DruidClusterRequester.prototype.getCursedDataSources=function(req){var connection=this.connection;var baseURLs;try{baseURLs=this.getCoordinatorURLs()}catch(e){req.logger.log("Could not get coordinator baseURLs for load rules: "+e.message);return Promise.resolve(null)}var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/rules")});if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"coordinatorRules").then(function(rulesMapping){if(!rulesMapping)return[];var dataSources=Object.keys(rulesMapping);return dataSources.filter(function(dataSource){return dataSourceIsDropForever(rulesMapping[dataSource])})})};DruidClusterRequester.prototype.isDataSourceCursed=function(dataSource,req){var connection=this.connection;var baseURLs=this.getCoordinatorURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/rules/"+dataSource+")")});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({method:"GET",json:true,agentOptions:agentOptions},urls,req,"coordinatorRulesDatasource").then(dataSourceIsDropForever)};DruidClusterRequester.prototype.setDropAllLoadRule=function(dataSourceName,req){var connection=this.connection;var baseURLs=this.getCoordinatorURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/rules/"+dataSourceName)});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:[{type:"dropForever",tieredReplicants:{}}],agentOptions:agentOptions},urls,req,"setLoadDropAllRule")};DruidClusterRequester.prototype.unCurse=function(dataSourceName,req){var connection=this.connection;var baseURLs=this.getCoordinatorURLs();if(!baseURLs||!baseURLs.length)return Promise.resolve([]);var urls=baseURLs.map(function(h){return h.changePathname("/druid/coordinator/v1/rules/"+dataSourceName)});var agentOptions=connection.socksHost?{socksHost:connection.socksHost}:null;return this.tryRequestingMultipleHosts({json:[],agentOptions:agentOptions},urls,req,"unsetLoadDropAllRule")};DruidClusterRequester.prototype.getTasks=function(request){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var connection,logger,tracker,user,supervisors,e_9,filledInWork,filledIn,supervisedTasksMapping,rawTasks,e_10,promises,tasks;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;logger=request.logger,tracker=request.tracker,user=request.user;if(DruidClusterRequester.CRIPPLE_TASK_QUERYING)return[2,[]];_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.getActiveSupervisorIds(request)];case 2:supervisors=_a.sent();logger.log("Got supervisors: "+supervisors);return[3,4];case 3:e_9=_a.sent();logger.warn("Could not get active supervisors "+e_9.message);return[3,4];case 4:filledInWork=(supervisors||[]).map(function(supervisorId){return tslib_1.__awaiter(_this,void 0,void 0,function(){var e_11;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);return[4,this.getSupervisorStatus(supervisorId,request)];case 1:return[2,_a.sent()];case 2:e_11=_a.sent();logger.warn("Could not get supervisor status "+e_11.message);return[3,3];case 3:return[2]}})})});return[4,Promise.all(filledInWork)];case 5:filledIn=_a.sent();supervisedTasksMapping=mapSupervisorsToTasks(logger,filledIn);_a.label=6;case 6:_a.trys.push([6,8,,9]);return[4,this.getAllTasks(request)];case 7:rawTasks=_a.sent();return[3,9];case 8:e_10=_a.sent();logger.warn("Could not all tasks "+e_10.message);return[2,[]];case 9:tracker.track({type:"druid-request",metric:"task/count",user:user,value:rawTasks?rawTasks.length:0,attr:{}});if(rawTasks&&rawTasks.length&&DruidClusterRequester.TASK_LIMIT!=null&&rawTasks.length>DruidClusterRequester.TASK_LIMIT){logger.log("Got "+rawTasks.length+" tasks, trimming to "+DruidClusterRequester.TASK_LIMIT);rawTasks=rawTasks.slice(0,DruidClusterRequester.TASK_LIMIT)}promises=(rawTasks||[]).map(function(task){return tslib_1.__awaiter(_this,void 0,void 0,function(){var payload,e_12;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);return[4,this.getTaskPayload(task.id,request)];case 1:payload=_a.sent();if(!payload)return[2,null];return[3,3];case 2:e_12=_a.sent();logger.warn("Could not get task payload "+e_12.message);return[2,null];case 3:return[2,task_1.Task.fromClusterAndStatusAndPayloadAndSupervisorIds(connection.name,task,payload,supervisedTasksMapping)]}})})});return[4,Promise.all(promises.filter(Boolean))];case 10:tasks=_a.sent();return[2,tasks.filter(Boolean)]}})})};DruidClusterRequester.prototype.cleanUpTasksAndSupervisors=function(dataSource,request){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var connection,user,requestId,logger,e_13,unfinishedTasks,e_14,promises;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;user=request.user,requestId=request.requestId,logger=request.logger;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.shutdownSupervisor(dataSource,request)];case 2:_a.sent();return[3,4];case 3:e_13=_a.sent();if(e_13.message.includes("does not exist")||e_13.message.includes("Cannot find any supervisor")){logger.log("No supervisor to shutdown, continuing")}else{throw new error_1.DatasetsError("Could not shut down supervisor for "+dataSource+", "+connection.name+": "+e_13.message)}return[3,4];case 4:_a.trys.push([4,6,,7]);return[4,this.getTasks(request)];case 5:unfinishedTasks=_a.sent();return[3,7];case 6:e_14=_a.sent();throw new error_1.DatasetsError("Could not get unfinished tasks for datasource "+dataSource+", please try again: "+e_14.message);case 7:if(!unfinishedTasks||!Array.isArray(unfinishedTasks))return[2];unfinishedTasks=unfinishedTasks.filter(function(t){return t.dataSource===dataSource&&(t.statusCode==="PENDING"||t.statusCode==="RUNNING")});promises=unfinishedTasks.map(function(t){return tslib_1.__awaiter(_this,void 0,void 0,function(){var e_15;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);return[4,this.shutdownTask(t.taskId,request)];case 1:_a.sent();return[3,3];case 2:e_15=_a.sent();throw new error_1.DatasetsError("Could not shut down task "+t.taskId+": "+e_15.message);case 3:return[2]}})})});return[4,Promise.all(promises)];case 8:_a.sent();return[2]}})})};DruidClusterRequester.prototype.inflateSupervisor=function(supervisorId,connectionName,connectionTitle,supervisorHistory,req){return tslib_1.__awaiter(this,void 0,void 0,function(){var logger,params,partial,status,skipIf,e_16;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:logger=req.logger;params={connectionName:connectionName,id:supervisorId,connectionTitle:connectionTitle,history:supervisorHistory};partial=supervisor_1.Supervisor.fromSupervisorHistoryAndStatus(params);if(!partial.isAlive){return[2,partial]}_a.label=1;case 1:_a.trys.push([1,3,,4]);skipIf=function(error){return error&&(error.includes("does not exist")||error.includes("Cannot find any supervisor"))};return[4,this.getSupervisorStatus(supervisorId,req,skipIf)];case 2:status=_a.sent();return[3,4];case 3:e_16=_a.sent();if(e_16.message&&(!e_16.message.includes("does not exist")&&!e_16.message.includes("Cannot find any supervisor"))){logger.log("Could not get supervisor status for id: "+supervisorId+", cluster: "+connectionName+": "+e_16.message)}return[2,supervisor_1.Supervisor.fromSupervisorHistoryAndStatus(params)];case 4:params.status=status;return[2,supervisor_1.Supervisor.fromSupervisorHistoryAndStatus(params)]}})})};DruidClusterRequester.prototype.getSupervisorsForConnection=function(req){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var _a,name,title,logger,supervisorsObj,e_17,cursed,uncursedIds,inflatePromises,supervisorss;return tslib_1.__generator(this,function(_b){switch(_b.label){case 0:_a=this.connection,name=_a.name,title=_a.title;logger=req.logger;_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,this.getAllSupervisorIds(req)];case 2:supervisorsObj=_b.sent();return[3,4];case 3:e_17=_b.sent();logger.log("Could not get supervisor ids cluster: "+name+": "+e_17.message);return[2,[]];case 4:if(!supervisorsObj){logger.log("Empty response for supervisor ids query for cluster: "+name+".");return[2,[]]}return[4,this.getCursedDataSources(req)];case 5:cursed=_b.sent();uncursedIds=Object.keys(supervisorsObj).filter(function(id){return cursed?!cursed.includes(id):true});inflatePromises=uncursedIds.map(function(id){return tslib_1.__awaiter(_this,void 0,void 0,function(){return tslib_1.__generator(this,function(_a){return[2,this.inflateSupervisor(id,name,title,supervisorsObj?supervisorsObj[id]:null,req)]})})});return[4,Promise.all(inflatePromises)];case 6:supervisorss=_b.sent();if(!supervisorss)return[2,[]];return[2,[].concat.apply([],supervisorss.filter(Boolean)).sort(function(s1,s2){if(!s1.isAlive&&s2.isAlive)return 1;if(s1.isAlive&&!s2.isAlive)return-1;return s1.id.localeCompare(s2.id)})]}})})};DruidClusterRequester.prototype.prepareDataSourceForCreation=function(dataSourceName,request,isSupervisor){if(isSupervisor===void 0){isSupervisor=false}return tslib_1.__awaiter(this,void 0,void 0,function(){var logger,isCursed,e_18,e_19,supervisorIds,e_20;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:logger=request.logger;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.isDataSourceCursed(dataSourceName,request)];case 2:isCursed=_a.sent();return[3,4];case 3:e_18=_a.sent();logger.error("Could not figure out if datasource is cursed: "+e_18.message);throw new error_1.DatasetsError("Could not prepare datasource for creation: "+e_18.message);case 4:if(!isCursed)return[3,9];_a.label=5;case 5:_a.trys.push([5,7,,8]);return[4,this.cleanUpTasksAndSupervisors(dataSourceName,request)];case 6:_a.sent();return[3,8];case 7:e_19=_a.sent();if(e_19.message===dataSourceName+" does not exist"){logger.error("No supervisor to shutdown, continuing")}else{throw new error_1.DatasetsError("Could not clean up tasks: "+e_19.message)}return[3,8];case 8:return[3,14];case 9:if(!isSupervisor)return[3,14];supervisorIds=void 0;_a.label=10;case 10:_a.trys.push([10,12,,13]);return[4,this.getActiveSupervisorIds(request)];case 11:supervisorIds=_a.sent();return[3,13];case 12:e_20=_a.sent();logger.error("Could not get existing supervisor ids: "+e_20.message);throw new error_1.DatasetsError("Could not get existing supervisor ids: "+e_20.message);case 13:if(Array.isArray(supervisorIds)&&supervisorIds.includes(dataSourceName)){throw new error_1.DatasetsError("Could not create supervisor: "+dataSourceName+" already exists!")}_a.label=14;case 14:return[2,this.unCurse(dataSourceName,request)]}})})};DruidClusterRequester.prototype.getDataSourcesForConnection=function(request,prioritiesForMeta){return tslib_1.__awaiter(this,void 0,void 0,function(){var _this=this;var connection,logger,tracker,globalMetadatas,e_21,supervisorsObj,e_22,cursedSources,e_23,dataSourceNames,supervisorIds,inflatedCursed,inflatedSupervisors,onlySupes,globalLoadInfo,e_24,filledInRealSources,tasks,e_25,filledInSourcesWithTasks;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:connection=this.connection;logger=request.logger,tracker=request.tracker;_a.label=1;case 1:_a.trys.push([1,3,,4]);return[4,this.getAllSegmentMetadata(request)];case 2:globalMetadatas=_a.sent();if(!globalMetadatas)return[2,[]];return[3,4];case 3:e_21=_a.sent();logger.warn("Data sources query failed for: "+connection.name+": "+e_21.message);throw new Error("Data sources query failed for: "+connection.name+": "+e_21.message);case 4:_a.trys.push([4,6,,7]);return[4,this.getAllSupervisorIds(request)];case 5:supervisorsObj=_a.sent();return[3,7];case 6:e_22=_a.sent();logger.warn("Supervisors query (in datasources query) failed for: "+connection.name+": "+e_22.message);throw new Error("Supervisors query (in datasources query) failed for: "+connection.name+": "+e_22.message);case 7:_a.trys.push([7,9,,10]);return[4,this.getCursedDataSources(request)];case 8:cursedSources=_a.sent();logger.debug("cursed for cluster "+connection.name+" "+(cursedSources?cursedSources.join(","):null));return[3,10];case 9:e_23=_a.sent();logger.warn("Cannot filter out cursed data sources for "+connection.name+": "+e_23.message);return[2,null];case 10:dataSourceNames=general_1.dedupe(globalMetadatas.map(function(d){return d.TABLE_NAME})).filter(function(dataSourceName){return!cursedSources.includes(dataSourceName)});supervisorIds=supervisorsObj?Object.keys(supervisorsObj):[];inflatedCursed=cursedSources.map(function(dsName){if(supervisorIds.includes(dsName))return null;return dataset_1.Dataset.fromJS({name:dsName,connectionName:connection.name,connectionTitle:connection.title,isCursed:true})}).filter(Boolean);return[4,Promise.all(supervisorIds.map(function(supervisorId){return tslib_1.__awaiter(_this,void 0,void 0,function(){var e_26;return tslib_1.__generator(this,function(_a){switch(_a.label){case 0:_a.trys.push([0,2,,3]);return[4,this.inflateSupervisor(supervisorId,connection.name,connection.title,supervisorsObj?supervisorsObj[supervisorId]:null,request)];case 1:return[2,_a.sent()];case 2:e_26=_a.sent();logger.warn("Cannot inflate supervisor "+supervisorId+" "+connection.name+": "+e_26.message);return[2,null];case 3:return[2]}})})}).filter(Boolean))];case 11:inflatedSupervisors=_a.sent();onlySupes=supervisorIds.filter(function(id){return!dataSourceNames.includes(id)}).map(function(supervisorId){var supervisor=inflatedSupervisors.find(function(s){return s.id===supervisorId});if(cursedSources.includes(supervisorId)){return dataset_1.Dataset.fromJS({name:supervisorId,connectionName:connection.name,connectionTitle:connection.title,isCursed:true,supervisor:supervisor})}try{return dataset_1.Dataset.fromSupervisor(supervisor)}catch(e){logger.warn("Cannot add supervisor to datasource: "+supervisorId+" "+connection.name+": "+e.message);return null}});_a.label=12;case 12:_a.trys.push([12,14,,15]);return[4,this.getCoordinatorsLoadStatus(request)];case 13:globalLoadInfo=_a.sent();return[3,15];case 14:e_24=_a.sent();logger.error("Could not get load status: "+e_24.message);return[3,15];case 15:return[4,Promise.all(dataSourceNames.map(function(name){return tslib_1.__awaiter(_this,void 0,void 0,function(){var isLightVersion;return tslib_1.__generator(this,function(_a){isLightVersion=prioritiesForMeta?!prioritiesForMeta.find(function(d){return d.dataSource===name}):false;try{return[2,this.fillInDatasource(request,name,globalMetadatas,globalLoadInfo,isLightVersion,inflatedSupervisors)]}catch(e){logger.error("Could not fill in data source: "+e.message);return[2,null]}return[2]})})}))];case 16:filledInRealSources=_a.sent();_a.label=17;case 17:_a.trys.push([17,19,,20]);return[4,this.getTasks(request)];case 18:tasks=_a.sent();return[3,20];case 19:e_25=_a.sent();logger.warn("Could not fill in tasks for data sources for "+connection.name+": "+e_25.message);return[3,20];case 20:filledInSourcesWithTasks=dataset_1.Dataset.resolveTasksWithDataSources(connection.name,connection.title,tasks,filledInRealSources,inflatedCursed);return[2,general_1.dedupe(filledInSourcesWithTasks.concat(inflatedCursed).concat(onlySupes),function(d){return d.name})]}})})};return DruidClusterRequester}();exports.DruidClusterRequester=DruidClusterRequester;