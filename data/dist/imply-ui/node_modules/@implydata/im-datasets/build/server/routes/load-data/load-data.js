"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");var express=require("express");var nike_hercules_1=require("@implydata/nike-hercules");var data_loader_spec_1=require("../../../common/models/data-loader-spec/data-loader-spec");var beltful_1=require("@implydata/beltful");var router=express.Router();function cleanName(fileName){var parts=fileName.split(".");var extension=parts.pop();return beltful_1.StringUtils.makeUrlSafeName(parts.join(""))+"."+beltful_1.StringUtils.makeUrlSafeName(extension)}function tryToPrettifySampleError(e){var message=e.message;if(message.includes("Forbidden")){return"No access to bucket. Please check that your IAM role has access to this bucket."}else if(message.includes("The specified bucket does not exist")){return"The specified s3 bucket does not exist"}else if(message.includes("No objects found")){return message+". Please check that it exists."}return message}function loadDataRouterFactory(generateUploadUrl){var _this=this;if(generateUploadUrl){router.post("/s3-sign",function(req,res,next){return tslib_1.__awaiter(_this,void 0,void 0,function(){var requestId,user,_a,fileName,fileType,fileSize,connectionName,urlResponse,e_1;return tslib_1.__generator(this,function(_b){switch(_b.label){case 0:requestId=req.requestId,user=req.user;_a=req.body,fileName=_a.fileName,fileType=_a.fileType,fileSize=_a.fileSize,connectionName=_a.connectionName;_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,generateUploadUrl(connectionName,cleanName(fileName),user,requestId)];case 2:urlResponse=_b.sent();return[3,4];case 3:e_1=_b.sent();nike_hercules_1.LOGGER.error("Could not get upload URL: "+e_1.message);next(e_1);return[2];case 4:res.json({signedRequest:urlResponse.url,s3Path:urlResponse.fetchUrl});return[2]}})})})}router.post("/sample",function(req,res,next){return tslib_1.__awaiter(_this,void 0,void 0,function(){var logger,dbAuthToken,decorators,connectionActions,_a,connectionName,spec,deserializedSpec,payload,requester,e_2,sampleDataResp,e_3,data,columns;return tslib_1.__generator(this,function(_b){switch(_b.label){case 0:logger=req.logger,dbAuthToken=req.dbAuthToken,decorators=req.decorators,connectionActions=req.connectionActions;_a=req.body,connectionName=_a.connectionName,spec=_a.spec;try{deserializedSpec=data_loader_spec_1.DataLoaderSpec.fromJS(spec)}catch(e){res.status(500).json({error:"invalid data loader spec: "+e.message});return[2]}payload=deserializedSpec.toSamplePayload();_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,connectionActions.getDruidRequesterForConnectionName(connectionName,dbAuthToken,decorators)];case 2:requester=_b.sent();return[3,4];case 3:e_2=_b.sent();res.status(500).json({error:"Could not get connection: "+e_2.message});return[2];case 4:_b.trys.push([4,6,,7]);return[4,requester.sampleData(payload,req)];case 5:sampleDataResp=_b.sent();return[3,7];case 6:e_3=_b.sent();logger.error("Could not sample data "+e_3.message);res.sendError({error:"Sample error: "+tryToPrettifySampleError(e_3),status:500});return[2];case 7:if(!sampleDataResp){res.status(500).json({error:"Empty sample response"});return[2]}data=sampleDataResp.data.filter(Boolean);columns=deserializedSpec.getColumnsFromSample(sampleDataResp);res.json({sample:data.map(function(d){return d.parsed}).filter(Boolean),columns:columns});return[2]}})})});router.post("/submit",function(req,res,next){return tslib_1.__awaiter(_this,void 0,void 0,function(){var connectionActions,logger,dbAuthToken,decorators,_a,connectionName,task,requester,e_4,e_5;return tslib_1.__generator(this,function(_b){switch(_b.label){case 0:connectionActions=req.connectionActions,logger=req.logger,dbAuthToken=req.dbAuthToken,decorators=req.decorators;_a=req.body,connectionName=_a.connectionName,task=_a.task;_b.label=1;case 1:_b.trys.push([1,3,,4]);return[4,connectionActions.getDruidRequesterForConnectionName(connectionName,dbAuthToken,decorators)];case 2:requester=_b.sent();return[3,4];case 3:e_4=_b.sent();logger.warn("Could not get requester for supervisor: "+e_4.message);next(e_4);return[2];case 4:_b.trys.push([4,6,,7]);return[4,requester.createTask(task,req)];case 5:_b.sent();return[3,7];case 6:e_5=_b.sent();logger.error("Could not create task: "+e_5.message);next(e_5);return[2];case 7:res.json({status:"OK"});return[2]}})})});return router}exports.loadDataRouterFactory=loadDataRouterFactory;