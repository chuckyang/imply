"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");require("./json-data-loader.css");var React=require("react");var immutable_class_1=require("immutable-class");var caladan_1=require("@implydata/caladan");var caladan_2=require("@implydata/caladan");var Icons=require("@implydata/little-pictures");var strings_1=require("../../../common/utils/constants/strings");var data_loader_helper_1=require("../../../common/models/data-loader-helper/data-loader-helper");var ingestion_type_selection_1=require("../ingestion-type-selection/ingestion-type-selection");var JSONDataLoader=function(_super){tslib_1.__extends(JSONDataLoader,_super);function JSONDataLoader(){var _this=_super.call(this)||this;_this.delegate=new caladan_2.ImmutableFormDelegate(_this);return _this}JSONDataLoader.prototype.componentDidMount=function(){this.initFromProps(this.props)};JSONDataLoader.prototype.componentWillReceiveProps=function(nextProps){this.initFromProps(nextProps)};JSONDataLoader.prototype.initFromProps=function(props){var dataSources=props.dataSources,dataLoaderHelper=props.dataLoaderHelper,exampleDatasets=props.exampleDatasets;var _a=this.state,newInstance=_a.newInstance,selectedConnection=_a.selectedConnection;var newState={};if(!selectedConnection){newState.selectedConnection=dataLoaderHelper.getInitialConnectionName()}if(!newInstance){try{newState.newInstance=dataLoaderHelper.getJSONSpec(exampleDatasets,dataSources)}catch(e){this.setState({initError:new Error("Could not populate spec: "+e.message)});return}}var myNewInstance=newInstance||newState.newInstance;if(!myNewInstance){this.setState({initError:new Error("Could not populate spec")});return}if(data_loader_helper_1.isCreatingDataset(dataSources,myNewInstance)){newState.createNewDataSourceMode=true}else if(this.hasDataSources()&&(!myNewInstance||!myNewInstance.getDataSource())){newState.newInstance=newState.newInstance.changeDataSource(dataSources[0].name)}this.setState(newState)};JSONDataLoader.prototype.hasDataSources=function(){var dataSources=this.props.dataSources;return dataSources&&dataSources.length};JSONDataLoader.prototype.changeConnection=function(selectedConnection){this.setState({selectedConnection:selectedConnection,createNewDataSourceMode:true})};JSONDataLoader.prototype.changeDataSource=function(dataSource){var newInstance=this.state.newInstance;this.setState({newInstance:newInstance.changeDataSource(dataSource.name)})};JSONDataLoader.prototype.onSubmit=function(){var _this=this;var onSubmit=this.props.onSubmit;var _a=this.state,selectedConnection=_a.selectedConnection,newInstance=_a.newInstance;return onSubmit(newInstance,selectedConnection,function(e){return _this.setState({postError:e})})};JSONDataLoader.prototype.renderDatasourceInput=function(){var _this=this;var dataSources=this.props.dataSources;var _a=this.state,newInstance=_a.newInstance,errors=_a.errors,createNewDataSourceMode=_a.createNewDataSourceMode,selectedConnection=_a.selectedConnection;var buttonTitle=createNewDataSourceMode?strings_1.STRINGS.orSelectADataset:strings_1.STRINGS.orCreateANewDataset;var makeTextInput=caladan_2.ImmutableTextInput.simpleGenerator(newInstance,this.delegate.onChange,{},errors);var dataSourceName=newInstance.getDataSource();var myDataSources=selectedConnection?dataSources.filter(function(d){return d.connectionName===selectedConnection}):dataSources;var existingDataSource=immutable_class_1.NamedArray.findByName(myDataSources||[],dataSourceName);var selectedItem=existingDataSource||(myDataSources||[])[0];var DataSourcesDropdown=caladan_1.Dropdown.specialize();var toggleMode=function(){var newState={createNewDataSourceMode:!createNewDataSourceMode};var isSwitchToDropdown=!createNewDataSourceMode===false;if(isSwitchToDropdown){newState.newInstance=newInstance.changeDataSource(selectedItem.name)}_this.setState(newState)};var isCreateAndNoDataSources=createNewDataSourceMode&&!this.hasDataSources();return React.createElement("div",{className:"datasource-selector"},createNewDataSourceMode?React.createElement("div",null,caladan_1.FormLabel.dumbLabel("New dataset"),makeTextInput("dataSource")):React.createElement(DataSourcesDropdown,{label:"Dataset",selectedItem:selectedItem,renderItem:function(d){return d?d.name:""},items:myDataSources,onSelect:this.changeDataSource.bind(this)}),isCreateAndNoDataSources?null:React.createElement(caladan_1.Button,{type:"light",title:buttonTitle,onClick:toggleMode}))};JSONDataLoader.prototype.render=function(){var _this=this;var _a=this.props,back=_a.back,dataLoaderHelper=_a.dataLoaderHelper,dataSources=_a.dataSources;var _b=this.state,newInstance=_b.newInstance,errors=_b.errors,selectedConnection=_b.selectedConnection,postError=_b.postError,initError=_b.initError;if(initError){return React.createElement("div",{className:"json-data-loader panel"},React.createElement("div",{className:"error-block"},initError.message))}if(!newInstance||!dataLoaderHelper)return React.createElement(caladan_1.Loader,null);var onChange=function(v){if(data_loader_helper_1.isCreatingDataset(dataSources,v)){_this.setState({createNewDataSourceMode:true})}return _this.delegate.onChange(v,true,"rest",errors["rest"])};var specConverters={valueToString:function(value){return JSON.stringify(value,null,2)},stringToValue:function(str){return JSON.parse(str)}};var ingestionType=dataLoaderHelper.computeIngestionType();var ingestionListItem=ingestion_type_selection_1.INGESTION_TYPES_LIST_ITEMS.find(function(li){return li.type===ingestionType});if(!ingestionListItem)ingestionListItem=ingestion_type_selection_1.INGESTION_TYPES_LIST_ITEMS.find(function(li){return li.type==="other-batch"});var clusterDiv;var connections=dataLoaderHelper.connections;var multipleConnections=connections&&connections.length>1;if(multipleConnections){var ConnectionsDropdown=caladan_1.Dropdown.specialize();clusterDiv=React.createElement("div",{className:"connection-selector"},React.createElement(ConnectionsDropdown,{label:"Cluster",className:"connection-dropdown",selectedItem:selectedConnection,renderItem:function(c){return immutable_class_1.NamedArray.findByName(connections,c).title},items:connections?connections.map(function(c){return c.name}):[],onSelect:this.changeConnection.bind(this)}))}else{clusterDiv=null}return React.createElement("div",{className:"json-data-loader panel"},React.createElement("div",{className:"title-bar"},React.createElement(caladan_1.Button,{className:"back",svg:Icons.BACK,type:"light",onClick:function(){caladan_1.GateKeeper.checkAndCall(back)}}),React.createElement("div",{className:"title"},"Load data (",["kafka","kinesis"].includes(ingestionListItem.type)?"supervisor":ingestionListItem.type,"): ",ingestionListItem.title)),React.createElement("div",{className:"tabless-content has-button-bar"},React.createElement("div",{className:"selectors"},clusterDiv,this.renderDatasourceInput()),postError?React.createElement("div",{className:"error-block"},postError.message):null,caladan_1.FormLabel.dumbLabel("Task"),React.createElement(caladan_2.ImmutableTextInput,{key:"rest",instance:newInstance,path:"rest",className:name,onChange:onChange,validator:JSON.parse,converters:specConverters,infoId:"task",errorText:errors["task"],type:"textarea"})),React.createElement("div",{className:"main-button-bar"},React.createElement(caladan_1.Button,{className:"back",type:"secondary",onClick:function(){return back()}},React.createElement(caladan_1.SvgIcon,{svg:Icons.TO_ARROW}),strings_1.STRINGS.back),React.createElement(caladan_1.Button,{title:"Send",type:"primary",onClick:this.onSubmit.bind(this)})))};return JSONDataLoader}(React.Component);exports.JSONDataLoader=JSONDataLoader;