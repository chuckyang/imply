"use strict";Object.defineProperty(exports,"__esModule",{value:true});var tslib_1=require("tslib");require("./tasks.css");var React=require("react");var numeral=require("numeral");var classNames=require("classnames");var moment=require("moment-timezone");var caladan_1=require("@implydata/caladan");var Icons=require("@implydata/little-pictures");var beltful_1=require("@implydata/beltful");var task_status_modal_1=require("../task-status-modal/task-status-modal");var Tasks=function(_super){tslib_1.__extends(Tasks,_super);function Tasks(){var _this=_super.call(this)||this;_this.tabs=[{label:"All",value:"all"},{label:"Running",value:"running"},{label:"Pending",value:"pending"},{label:"Failed",value:"failed"},{label:"Successful",value:"successful"}];_this.mounted=false;_this.state={selectedTab:_this.tabs[0].value};return _this}Tasks.prototype.componentDidMount=function(){this.mounted=true};Tasks.prototype.componentWillUnmount=function(){this.mounted=false;clearInterval(this.interval)};Tasks.prototype.goToTaskLog=function(taskId){var connectionName=this.props.connectionName;window.open("cluster/task/log/"+connectionName+"/"+taskId,"_blank")};Tasks.prototype.getTasks=function(tabName){var _a=this.props,tasks=_a.tasks,connectionName=_a.connectionName;var myTasks=tasks.filter(function(t){return t.connectionName===connectionName});var STATUS_SORT_ORDER=["RUNNING","PENDING","FAILED","SUCCESS"];switch(tabName){case"all":return myTasks.sort(function(t1,t2){if(t1.statusCode!==t2.statusCode){return STATUS_SORT_ORDER.indexOf(t1.statusCode)-STATUS_SORT_ORDER.indexOf(t2.statusCode)}return t1.taskId.localeCompare(t2.taskId)});case"running":return myTasks.filter(function(t){return t.statusCode==="RUNNING"});case"pending":return myTasks.filter(function(t){return t.statusCode==="PENDING"});case"failed":return myTasks.filter(function(t){return t.statusCode==="FAILED"});case"successful":return myTasks.filter(function(t){return t.statusCode==="SUCCESS"});default:throw new Error("Unrecognized tab name: "+tabName)}};Tasks.prototype.renderTaskStatusModal=function(){var _this=this;var _a=this.props,tasks=_a.tasks,rerunTask=_a.rerunTask,connectionName=_a.connectionName,shutdownTask=_a.shutdownTask,onOpenLogModal=_a.onOpenLogModal;var showingTaskModalFor=this.state.showingTaskModalFor;if(!showingTaskModalFor)return null;var task=tasks.find(function(t){return t.taskId===showingTaskModalFor});return React.createElement(task_status_modal_1.TaskStatusModal,{task:task,rerunTask:rerunTask,onClose:function(){return _this.setState({showingTaskModalFor:null})},onCancel:shutdownTask,connectionName:connectionName,onOpenLogModal:function(){return onOpenLogModal(task)}})};Tasks.prototype.changeTab=function(value){this.setState({selectedTab:value})};Tasks.prototype.renderEmpty=function(){var selectedTab=this.state.selectedTab;var label=selectedTab==="all"?"There are no tasks":"There are no "+selectedTab+" tasks";return React.createElement("div",{className:"empty"},React.createElement("div",{className:"container"},React.createElement("div",{className:"title"},React.createElement("div",{className:"icon"},React.createElement(caladan_1.SvgIcon,{svg:Icons.TASKS})),React.createElement("div",{className:"label"},label))))};Tasks.prototype.renderTable=function(columns,rows,actions){var _this=this;var empty=!rows||!rows.length;var content=empty?this.renderEmpty():React.createElement(caladan_1.SimpleTable,{columns:columns,rows:rows,actions:actions,onRowClick:function(row){return _this.setState({showingTaskModalFor:row.taskId})}});return React.createElement("div",{className:classNames("table-container",{empty:empty})},content)};Tasks.prototype.renderButtonGroup=function(){var _this=this;var selectedTab=this.state.selectedTab;var items=this.tabs.map(function(tab){var label=tab.label,tabValue=tab.value;return{title:label,active:selectedTab===tabValue,onClick:_this.changeTab.bind(_this,tabValue),badge:""+_this.getTasks(tabValue).length}});return React.createElement(caladan_1.ButtonGroup,{items:items})};Tasks.prototype.render=function(){var _this=this;var _a=this.props,dataSource=_a.dataSource,tasks=_a.tasks;var selectedTab=this.state.selectedTab;if(!tasks)return React.createElement(caladan_1.Loader,null);function formatDuration(duration){if(duration===-1)return"Task could not start";return numeral(duration/1e3).format("0.00")+" s"}function renderStatus(t){var status=t.statusCode.toLowerCase();return React.createElement("div",null,React.createElement("div",{className:classNames("status-dot",status)}),React.createElement("span",{className:"status"},beltful_1.StringUtils.firstUp(status)))}function renderCreatedTime(t){return React.createElement("div",{className:"created"},t.createdTime?moment(t.createdTime).fromNow():"?")}var getTaskColumns=function(status){if(status==="running"){var columns=[{label:"Created time",field:"createdTime",cellRenderer:renderCreatedTime,width:200},{label:"Location",field:"location",width:200},{label:"Task id",field:"taskId",width:450}];if(!dataSource)columns=[{label:"Datasource",field:"dataSource",width:200}].concat(columns);return columns}else if(status==="all"){var columns=[{label:"Status",field:"statusCode",cellRenderer:renderStatus,width:150},{label:"Location",field:function(row){return row.getLocation()},width:150},{label:"Created time",field:"createdTime",cellRenderer:renderCreatedTime,width:150},{label:"Task id",field:"taskId",width:300}];if(!dataSource)columns=[{label:"Datasource",field:"dataSource",width:200}].concat(columns);return columns}else{var columns=[{label:"Run time",field:function(row){return formatDuration(row["duration"])},width:200},{label:"Task id",field:"taskId",width:450}];if(!dataSource)columns=[{label:"Datasource",field:"dataSource",width:200}].concat(columns);return columns}};var getTaskActions=function(status){if(status==="running"||status==="all"){return[{icon:Icons.INFO,callback:function(row){return _this.setState({showingTaskModalFor:row.taskId})}},{icon:Icons.FULL_REMOVE,callback:_this.props.shutdownTask.bind(_this),disabled:function(row){return row.statusCode!=="RUNNING"}}]}else{return[{icon:Icons.INFO,callback:function(row){return _this.setState({showingTaskModalFor:row.taskId})}}]}};return React.createElement("div",{className:"tasks"},this.renderButtonGroup(),this.renderTable(getTaskColumns(selectedTab),this.getTasks(selectedTab),getTaskActions(selectedTab)),this.renderTaskStatusModal())};return Tasks}(React.Component);exports.Tasks=Tasks;