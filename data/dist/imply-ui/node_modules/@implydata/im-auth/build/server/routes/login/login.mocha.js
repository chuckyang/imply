"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var supertest = require("supertest");
var chai_1 = require("chai");
var express = require("express");
var bodyParser = require("body-parser");
var nike_hercules_1 = require("@implydata/nike-hercules");
var login_1 = require("./login");
var immutable_store_1 = require("@implydata/immutable-store");
var models_1 = require("../../../common/models");
var store_authorizer_1 = require("../../authorizer/store-authorizer/store-authorizer");
var name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
var userStore = new immutable_store_1.ArrayStore({
    initArray: [models_1.User.fromJS({ name: name, accountId: 'hey' })]
});
var roleStore = new immutable_store_1.ArrayStore({
    initArray: []
});
var authStore = new immutable_store_1.ArrayStore({
    initArray: [models_1.UserAuth.fromJS({ name: name, pass: 'hello', hashStrategy: 'none' })]
});
var authorizer = new store_authorizer_1.StoreAuthorizer({
    userStore: userStore,
    getRoleStore: function (user) { return roleStore; },
    authStore: authStore
});
var server = express();
server.use(nike_hercules_1.HerculesServer.makeReqResDecorator());
server.use(nike_hercules_1.HerculesServer.makeSession('so much boilerplate', false, null));
server.use(bodyParser.json());
server.use(function (req, res, next) {
    req.authorizer = authorizer;
    next();
});
server.use('/', login_1.loginRouterFactory({}));
describe('login', function () {
    it('works with valid', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var app, checkPass;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, supertest(server)];
                case 1:
                    app = _a.sent();
                    return [4, app.post('/')
                            .set('Content-Type', "application/json")
                            .send({
                            name: name,
                            pass: 'hello'
                        })
                            .expect(200)];
                case 2:
                    _a.sent();
                    return [4, authorizer.checkUser(name, 'hello')];
                case 3:
                    checkPass = _a.sent();
                    chai_1.expect(checkPass.toJS()).to.deep.equal({ name: name, accountId: "hey" });
                    return [2];
            }
        });
    }); });
    it('fails with invalid auth', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var app;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, supertest(server)];
                case 1:
                    app = _a.sent();
                    return [2, app.post('/')
                            .set('Content-Type', "application/json")
                            .send({
                            name: name,
                            pass: 'hey!'
                        })
                            .expect(401)];
            }
        });
    }); });
});
describe('preserves url', function () {
    before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
            authorizer.hasAccounts = function () { return true; };
            server.use(function (req, res, next) {
                req.authorizer = authorizer;
                next();
            });
            return [2];
        });
    }); });
    it('works if type is login', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var app;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, supertest(server)];
                case 1:
                    app = _a.sent();
                    return [4, app.post('/something-something')
                            .set('Content-Type', "application/json")
                            .send({
                            name: name,
                            pass: 'hello',
                            accountId: 'hey',
                            type: 'login'
                        })
                            .expect(200)];
                case 2:
                    _a.sent();
                    return [2];
            }
        });
    }); });
});
