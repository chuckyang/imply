"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var supertest = require("supertest");
var chai_1 = require("chai");
var express = require("express");
var bodyParser = require("body-parser");
var nike_hercules_1 = require("@implydata/nike-hercules");
var invite_user_1 = require("./invite-user");
var immutable_store_1 = require("@implydata/immutable-store");
var models_1 = require("../../../common/models");
var authorizer_1 = require("../../authorizer");
var models_2 = require("../../models");
var name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
var userStore = new immutable_store_1.ArrayStore({
    initArray: [{ name: name }].map(function (u) { return models_1.User.fromJS(u); })
});
var roleStore = new immutable_store_1.ArrayStore({
    initArray: []
});
var authStore = new immutable_store_1.ArrayStore({
    initArray: []
});
var inviteTokenStore = new immutable_store_1.ArrayStore({
    initArray: []
});
var authorizer = new authorizer_1.StoreAuthorizer({
    userStore: userStore,
    getRoleStore: function (user) { return roleStore; },
    authStore: authStore
});
var server = express();
server.use(nike_hercules_1.HerculesServer.makeReqResDecorator());
server.use(nike_hercules_1.HerculesServer.makeSession('so much boilerplate', false, null));
server.use(bodyParser.json());
server.use(function (req, res, next) {
    req.inviteTokenStore = inviteTokenStore;
    req.authorizer = authorizer;
    next();
});
server.use('/', invite_user_1.inviteUserRouterFactory({
    appName: 'Cool app',
    userNameLabel: 'Emailz',
    showTerms: true,
    authorizer: authorizer
}));
describe('invite user', function () {
    var _this = this;
    this.timeout(4000);
    var tokenValue;
    before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var inviteToken;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    inviteToken = models_2.InviteToken.createFor(name);
                    return [4, inviteTokenStore.addOrUpdate(inviteToken)];
                case 1:
                    _a.sent();
                    tokenValue = inviteToken.value;
                    return [2];
            }
        });
    }); });
    describe('get', function () {
        var _this = this;
        this.timeout(12000);
        it('errors with blank', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.get('/').expect(500)];
                }
            });
        }); });
        it('does a query (value)', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.get("/?user=" + name + "&token=" + tokenValue).expect(200)];
                }
            });
        }); });
        it('does a query (value)', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.get("/?user=" + name + "&token=bad" + tokenValue).expect(500)];
                }
            });
        }); });
        it('does a query same (value)', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.get("/?user=" + name + "&token=" + tokenValue).expect(200)];
                }
            });
        }); });
    });
    describe('accept', function () {
        it('works with correct', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app, checkPass;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [4, app.post('/accept')
                                .set('Content-Type', "application/json")
                                .send({
                                name: name,
                                pass: 'hey!',
                                token: tokenValue
                            })
                                .expect(200)];
                    case 2:
                        _a.sent();
                        return [4, authorizer.checkUser(name, 'hey!')];
                    case 3:
                        checkPass = _a.sent();
                        chai_1.expect(checkPass.toJS()).to.deep.equal({ name: name, status: 'ok' });
                        return [2];
                }
            });
        }); });
        it('fails with incorrect token', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.post('/accept')
                                .set('Content-Type', "application/json")
                                .send({
                                name: name,
                                pass: 'hey!',
                                token: 'bad-token'
                            })
                                .expect(500)];
                }
            });
        }); });
    });
});
