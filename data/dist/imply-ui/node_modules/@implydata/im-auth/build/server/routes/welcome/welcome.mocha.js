"use strict";
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var supertest = require("supertest");
var chai_1 = require("chai");
var express = require("express");
var bodyParser = require("body-parser");
var nike_hercules_1 = require("@implydata/nike-hercules");
var immutable_store_1 = require("@implydata/immutable-store");
var models_1 = require("../../../common/models");
var authorizer_1 = require("../../authorizer");
var welcomeRoutes = require("./welcome");
var views_1 = require("../../views");
function extractConfig(text) {
    var a = "<script>window.__CONFIG__ = '";
    var b = "';</script>";
    var ai = text.indexOf(a);
    var bi = text.indexOf(b);
    if (ai < 0 || bi < 0)
        throw new Error('could not find config');
    return JSON.parse(new Buffer(text.substring(ai + a.length, bi), 'base64').toString('utf-8'));
}
var name = Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10);
function makeServer() {
    var server = express();
    server.use(nike_hercules_1.HerculesServer.makeReqResDecorator());
    server.use(nike_hercules_1.HerculesServer.makeSession('so much boilerplate', false, null));
    server.use(bodyParser.json());
    server.use(welcomeRoutes);
    return server;
}
var middleWare = (function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
    var authorizer, userSize, authSize;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                authorizer = req.authorizer;
                return [4, authorizer.userSize()];
            case 1:
                userSize = _a.sent();
                return [4, authorizer.userAuthSize()];
            case 2:
                authSize = _a.sent();
                if (!userSize || !authSize) {
                    res.send(views_1.loginLayout({
                        version: req.version,
                        title: req.title,
                        appName: 'ImAuth',
                        userNameLabel: 'Email',
                        showTerms: false,
                        mode: 'welcome',
                        assetsMountPoint: '/',
                        mountPoint: '/'
                    }));
                }
                else {
                    res.send('skipping this');
                }
                return [2];
        }
    });
}); });
describe('welcome', function () {
    var _this = this;
    this.timeout(4000);
    describe('serves page when no userAuths but users', function () {
        var server = makeServer();
        before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userStore, roleStore, authStore, authorizer;
            return tslib_1.__generator(this, function (_a) {
                userStore = new immutable_store_1.ArrayStore({
                    initArray: [{ name: name }].map(function (u) { return models_1.User.fromJS(u); })
                });
                roleStore = new immutable_store_1.ArrayStore({
                    initArray: [].map(function (r) { return models_1.Role.fromJS(r); })
                });
                authStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                authorizer = new authorizer_1.StoreAuthorizer({
                    userStore: userStore,
                    getRoleStore: function (user) { return roleStore; },
                    authStore: authStore
                });
                server.use(function (req, res, next) {
                    req.authorizer = authorizer;
                    next();
                });
                server.use(middleWare);
                return [2];
            });
        }); });
        it('gets triggered', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app, resp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [4, app.get('/')
                                .expect(200)];
                    case 2:
                        resp = _a.sent();
                        chai_1.expect(extractConfig(resp.text).mode).to.equal('welcome');
                        return [2];
                }
            });
        }); });
    });
    describe('serves page when no users but userAuths', function () {
        var server = makeServer();
        before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userStore, roleStore, authStore, authorizer;
            return tslib_1.__generator(this, function (_a) {
                userStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                roleStore = new immutable_store_1.ArrayStore({
                    initArray: [].map(function (r) { return models_1.Role.fromJS(r); })
                });
                authStore = new immutable_store_1.ArrayStore({
                    initArray: [{ name: 'hello', pass: 'hello ' }].map(function (ua) { return models_1.UserAuth.fromJS(ua); })
                });
                authorizer = new authorizer_1.StoreAuthorizer({
                    userStore: userStore,
                    getRoleStore: function (user) { return roleStore; },
                    authStore: authStore
                });
                server.use(function (req, res, next) {
                    req.authorizer = authorizer;
                    next();
                });
                server.use(middleWare);
                return [2];
            });
        }); });
        it('gets triggered ', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app, resp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [4, app.get('/')
                                .expect(200)];
                    case 2:
                        resp = _a.sent();
                        chai_1.expect(extractConfig(resp.text).mode).to.equal('welcome');
                        return [2];
                }
            });
        }); });
    });
    describe('serves page when non user auths or users', function () {
        var server = makeServer();
        before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userStore, roleStore, authStore, authorizer;
            return tslib_1.__generator(this, function (_a) {
                userStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                roleStore = new immutable_store_1.ArrayStore({
                    initArray: [].map(function (r) { return models_1.Role.fromJS(r); })
                });
                authStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                authorizer = new authorizer_1.StoreAuthorizer({
                    userStore: userStore,
                    getRoleStore: function (user) { return roleStore; },
                    authStore: authStore
                });
                server.use(function (req, res, next) {
                    req.authorizer = authorizer;
                    next();
                });
                server.use(middleWare);
                return [2];
            });
        }); });
        it('gets triggered', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app, resp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [4, app.get('/')
                                .expect(200)];
                    case 2:
                        resp = _a.sent();
                        chai_1.expect(extractConfig(resp.text).mode).to.equal('welcome');
                        return [2];
                }
            });
        }); });
    });
    describe('does not serve page when both user auths and users', function () {
        var server = makeServer();
        before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userStore, roleStore, authStore, authorizer;
            return tslib_1.__generator(this, function (_a) {
                userStore = new immutable_store_1.ArrayStore({
                    initArray: [{ name: name }].map(function (u) { return models_1.User.fromJS(u); })
                });
                roleStore = new immutable_store_1.ArrayStore({
                    initArray: [].map(function (r) { return models_1.Role.fromJS(r); })
                });
                authStore = new immutable_store_1.ArrayStore({
                    initArray: [{ name: 'hello', pass: 'hello ' }].map(function (ua) { return models_1.UserAuth.fromJS(ua); })
                });
                authorizer = new authorizer_1.StoreAuthorizer({
                    userStore: userStore,
                    getRoleStore: function (user) { return roleStore; },
                    authStore: authStore
                });
                server.use(function (req, res, next) {
                    req.authorizer = authorizer;
                    next();
                });
                server.use(middleWare);
                return [2];
            });
        }); });
        it('gets triggered', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app, resp;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [4, app.get('/')
                                .expect(200)];
                    case 2:
                        resp = _a.sent();
                        chai_1.expect(resp.text).to.equal('skipping this');
                        return [2];
                }
            });
        }); });
    });
    describe('create', function () {
        var server = makeServer();
        before(function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userStore, roleStore, authStore, authorizer;
            return tslib_1.__generator(this, function (_a) {
                userStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                roleStore = new immutable_store_1.ArrayStore({
                    initArray: [].map(function (r) { return models_1.Role.fromJS(r); })
                });
                authStore = new immutable_store_1.ArrayStore({
                    initArray: []
                });
                authorizer = new authorizer_1.StoreAuthorizer({
                    userStore: userStore,
                    getRoleStore: function (user) { return roleStore; },
                    authStore: authStore
                });
                server.use(function (req, res, next) {
                    req.authorizer = authorizer;
                    next();
                });
                server.use('/', welcomeRoutes);
                return [2];
            });
        }); });
        it.skip('works with reasonable', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.post('/create')
                                .set('Content-Type', "application/json")
                                .send({
                                name: name,
                                pass: 'hey!'
                            })
                                .expect(200)];
                }
            });
        }); });
        it('fails with incorrect info', function () { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var app;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, supertest(server)];
                    case 1:
                        app = _a.sent();
                        return [2, app.post('/create')
                                .set('Content-Type', "application/json")
                                .send({
                                name: name
                            })
                                .expect(400)];
                }
            });
        }); });
    });
});
