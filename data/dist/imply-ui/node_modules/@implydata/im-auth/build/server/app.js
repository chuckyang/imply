"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var express = require("express");
var bodyParser = require("body-parser");
var nike_hercules_1 = require("@implydata/nike-hercules");
var models_1 = require("../common/models");
var views_1 = require("./views");
var path = require("path");
var invite_user_1 = require("./routes/invite-user/invite-user");
var passResetRoutes = require("./routes/pass-reset/pass-reset");
var mklinkRoutes = require("./routes/mklink/mklink");
var welcomeRoutes = require("./routes/welcome/welcome");
var login_1 = require("./routes/login/login");
function makeAuthApp(options) {
    var _this = this;
    var appName = options.appName, userNameLabel = options.userNameLabel, showTerms = options.showTerms, sessionSecret = options.sessionSecret, secureCookie = options.secureCookie, title = options.title, sessionStore = options.sessionStore, version = options.version, authorizer = options.authorizer, assetsMountPoint = options.assetsMountPoint, subdomainGetter = options.subdomainGetter, mainDomain = options.mainDomain;
    var app = express.Router();
    app.use(nike_hercules_1.HerculesServer.makeSession(sessionSecret || 'this-is-secret', secureCookie, sessionStore));
    function ensureSubdomain(req, res, next) {
        var subdomains = req.subdomains;
        if (!subdomains || !subdomains.length || subdomains.length > 1) {
            res.send(views_1.loginLayout({
                version: req.version,
                title: req.title,
                appName: appName,
                userNameLabel: userNameLabel,
                showTerms: showTerms,
                mountPoint: req.mountPoint,
                assetsMountPoint: assetsMountPoint == null ? req.mountPoint : assetsMountPoint,
                mode: 'account-input',
                mainDomain: mainDomain
            }));
            return;
        }
        next();
    }
    app.use('/assets', express.static(path.join(__dirname, '../../build/public'), { redirect: false }));
    app.use('/assets', express.static(path.join(__dirname, '../../assets'), { redirect: false }));
    app.use(function (req, res, next) {
        req.user = null;
        req.title = title;
        req.version = version;
        next();
    });
    app.post(/login$/, bodyParser.json(), login_1.loginRouterFactory({ mainDomain: mainDomain, subdomainGetter: subdomainGetter }));
    if (subdomainGetter) {
        app.get(/.?/, ensureSubdomain);
    }
    app.use('/logout', function (req, res, next) {
        req.session.loggedIn = false;
        res.redirect('/');
    });
    if (authorizer.isManagingUsers()) {
        app.use('/welcome', bodyParser.json(), welcomeRoutes);
        app.use('/invite-user', bodyParser.json(), invite_user_1.inviteUserRouterFactory({
            appName: appName,
            userNameLabel: userNameLabel,
            showTerms: showTerms,
            authorizer: authorizer
        }));
    }
    if (authorizer.isManagingUsers()) {
        app.use(function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
            var userSize, authSize;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, authorizer.userSize()];
                    case 1:
                        userSize = _a.sent();
                        return [4, authorizer.userAuthSize()];
                    case 2:
                        authSize = _a.sent();
                        if (!userSize || !authSize) {
                            res.send(views_1.loginLayout({
                                version: req.version,
                                title: req.title,
                                appName: appName,
                                userNameLabel: userNameLabel,
                                showTerms: showTerms,
                                mode: 'welcome',
                                mountPoint: req.mountPoint,
                                assetsMountPoint: assetsMountPoint == null ? req.mountPoint : assetsMountPoint
                            }));
                        }
                        else {
                            next();
                        }
                        return [2];
                }
            });
        }); });
    }
    if (subdomainGetter) {
        if (!mainDomain) {
            throw new Error('Must provide main domain in subdomain mode');
        }
    }
    app.use(function (req, res, next) { return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var userName, user, e_1;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!req.session.loggedIn) return [3, 5];
                    userName = req.session.userName || (req.session.user ? req.session.user.name : null);
                    user = void 0;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4, authorizer.getUserWithRoles(userName)];
                case 2:
                    user = _a.sent();
                    return [3, 4];
                case 3:
                    e_1 = _a.sent();
                    res.status(500).json({ status: 'User can not be loaded' });
                    return [2];
                case 4:
                    if (!user) {
                        res.status(403).json({ status: 'No user found' });
                        return [2];
                    }
                    if (authorizer.hasAccounts() && !user.accountId) {
                        res.status(500).json({ status: 'User must have account id' });
                        return [2];
                    }
                    req.user = user;
                    next();
                    return [3, 6];
                case 5:
                    req.tracker.track({
                        type: 'serve-login-page',
                        user: null,
                        attr: {
                            subtype: 'redirect'
                        }
                    });
                    req.tracker.track({
                        type: 'serve-login-page',
                        user: null,
                        attr: {
                            subtype: 'redirect'
                        }
                    });
                    res.send(views_1.loginLayout({
                        version: version,
                        title: title,
                        appName: appName,
                        userNameLabel: userNameLabel,
                        showTerms: showTerms,
                        mode: 'vanilla',
                        assetsMountPoint: assetsMountPoint == null ? req.mountPoint : assetsMountPoint,
                        mountPoint: req.mountPoint
                    }));
                    _a.label = 6;
                case 6: return [2];
            }
        });
    }); });
    if (authorizer.isManagingUsers()) {
        app.use('/pass-reset', bodyParser.json(), passResetRoutes);
        app.use('/mklink', bodyParser.json(), mklinkRoutes);
        app.use(function (req, res, next) {
            var title = options.title, version = options.version, appName = options.appName;
            var user = req.user;
            if (user.status === models_1.User.STATUS_NEEDS_TO_SET_PASS) {
                res.send(views_1.loginLayout({
                    appName: appName,
                    userNameLabel: userNameLabel,
                    showTerms: showTerms,
                    version: version,
                    title: title,
                    assetsMountPoint: assetsMountPoint == null ? req.mountPoint : assetsMountPoint,
                    mountPoint: req.mountPoint,
                    userName: user.name,
                    mode: 'force-set-pass'
                }));
                return;
            }
            next();
        });
    }
    return app;
}
exports.makeAuthApp = makeAuthApp;
