"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var bcrypt = require("bcryptjs");
var hash_1 = require("../hash/hash");
var user_auth_1 = require("../../../common/models/user-auth/user-auth");
var password_1 = require("./password");
describe('password', function () {
    this.timeout(5000);
    var users = [
        {
            "name": "user1",
            "pass": "secret1",
            "hashStrategy": "none"
        },
        {
            "name": "user2",
            "pass": hash_1.saltedSha2("secret2"),
            "hashStrategy": "sha2"
        },
        {
            "name": "user3",
            "pass": bcrypt.hashSync("secret3"),
            "hashStrategy": "bcrypt"
        },
        {
            "name": "user4",
            "pass": hash_1.bcryptHashSync("secret4")
        }
    ].map(function (u) { return user_auth_1.UserAuth.fromJS(u); });
    it("gets valid user base case", function () {
        var user1 = users[0];
        var name = user1.name;
        var pass = user1.getPass();
        return password_1.getValidUser(users, name, pass, null).then(function (u) {
            chai_1.expect(u.toJS()).to.deep.equal({
                "name": "user1",
                "pass": "secret1",
                "hashStrategy": "none"
            });
        });
    });
    it("gets valid user base case invalid", function () {
        return password_1.getValidUser(users, 'hi@imply.io', 'password')
            .then(function (u) { return chai_1.expect(u).to.deep.equal(null); });
    });
    it("works with sha2 hash strategy", function () {
        var user2 = users[1];
        var name = user2.name;
        return password_1.getValidUser(users, name, "secret2").then(function (user) {
            chai_1.expect(user.name).to.deep.equal('user2');
            chai_1.expect(hash_1.saltedSha2("secret2")).to.deep.equal(user.getPass());
        });
    });
    it("works with bcrypt hash strategy", function () {
        var user3 = users[2];
        var name = user3.name;
        return password_1.getValidUser(users, name, "secret3").then(function (user) {
            chai_1.expect(user.name).to.deep.equal('user3');
            chai_1.expect(user.hashStrategy).to.deep.equal('bcrypt');
        });
    });
    it("defaults to bcrypt strategy when none is defined", function () {
        var user4 = users[3];
        var name = user4.name;
        return password_1.getValidUser(users, name, "secret4").then(function (user) {
            chai_1.expect(user.name).to.deep.equal('user4');
            hash_1.bcryptCompare("secret4", user.getPass())
                .then(function (result) { return chai_1.expect(result).to.deep.equal(true); });
        });
    });
});
