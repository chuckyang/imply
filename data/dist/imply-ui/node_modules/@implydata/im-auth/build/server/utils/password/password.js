"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var immutable_class_1 = require("immutable-class");
var hash_1 = require("../hash/hash");
var user_auth_1 = require("../../../common/models/user-auth/user-auth");
function getBcryptUserAuth(name, pass) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var hash;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4, hash_1.bcryptHash(pass)];
                case 1:
                    hash = _a.sent();
                    return [2, new user_auth_1.UserAuth({
                            name: name,
                            pass: hash,
                            hashStrategy: 'bcrypt'
                        })];
            }
        });
    });
}
exports.getBcryptUserAuth = getBcryptUserAuth;
function getValidUser(users, name, pass, shaSalt) {
    var user = immutable_class_1.NamedArray.findByName(users, name);
    if (user)
        return checkPassword(user, pass, shaSalt).then(function (equals) { return equals ? user : null; });
    return Promise.resolve(null);
}
exports.getValidUser = getValidUser;
function checkPassword(userAuth, password, shaSalt) {
    if (shaSalt === void 0) { shaSalt = ''; }
    if (!password)
        return Promise.resolve(false);
    var strategy = userAuth.getHashStrategy();
    var userAuthPass = userAuth.getPass();
    switch (strategy) {
        case 'none':
            return Promise.resolve(userAuthPass === password);
        case 'sha2':
            return Promise.resolve((shaSalt ? hash_1.sha2(shaSalt + password) : hash_1.saltedSha2(password)) === userAuthPass);
        case 'bcrypt':
            return hash_1.bcryptCompare(password, userAuthPass);
        default:
            throw new Error("unrecognized strategy " + strategy);
    }
}
exports.checkPassword = checkPassword;
function updatePassword(userAuth, password) {
    var strategy = userAuth.getHashStrategy();
    if (strategy === 'sha2') {
        return Promise.resolve(userAuth.changePass(hash_1.saltedSha2(password)));
    }
    else if (strategy === 'bcrypt') {
        return hash_1.bcryptHash(password).then(function (h) { return userAuth.changePass(h); });
    }
    else {
        return Promise.resolve(userAuth.changePass(password));
    }
}
exports.updatePassword = updatePassword;
