"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
require('./login-view.css');
var beltful_1 = require("@implydata/beltful");
var React = require("react");
var caladan_1 = require("@implydata/caladan");
var caladan_2 = require("@implydata/caladan");
var ajax_1 = require("@implydata/ajax");
var strings_1 = require("../../common/strings");
var credentials_1 = require("../../common/models/credentials/credentials");
var pass_strength_1 = require("../../common/utils/pass-strength/pass-strength");
var response_status_1 = require("../../common/utils/response-status/response-status");
var MAX_USER_ID = 200;
var MAX_PASS = 200;
var LABELS = {
    pass: {
        label: 'Password',
        description: 'Enter new password'
    },
    repeatPass: {
        label: 'Repeat Password',
        description: 'Enter password again'
    }
};
var LoginView = (function (_super) {
    tslib_1.__extends(LoginView, _super);
    function LoginView() {
        var _this = _super.call(this) || this;
        _this.checkPass = function (pass) {
            if (pass && pass.length > MAX_PASS) {
                throw new Error("This is too long");
            }
            if (_this.isSettingPassword()) {
                var error = _this.getPassStrengthThing().getIssuesWithPass(pass);
                if (error) {
                    throw new Error(error);
                }
            }
            return true;
        };
        _this.checkRepeatPass = function (repeat) {
            if (repeat !== _this.state.newInstance.pass)
                throw new Error('Passwords must match');
            return true;
        };
        _this.checkUserName = function (name) {
            if (name && name.length > MAX_USER_ID) {
                throw new Error("This is too long");
            }
            return true;
        };
        _this.state = {
            loading: false,
            newInstance: new credentials_1.Credentials()
        };
        _this.delegate = new caladan_2.ImmutableFormDelegate(_this);
        return _this;
    }
    LoginView.prototype.componentWillMount = function () {
        var hash = window.location.hash;
        if (hash)
            window.location.hash = '';
    };
    LoginView.prototype.componentDidMount = function () {
        this.initFromProps(this.props);
    };
    LoginView.prototype.initFromProps = function (props) {
        var userName = props.userName;
        if (!userName)
            return;
        this.setState({ newInstance: new credentials_1.Credentials({ name: userName }) });
    };
    LoginView.prototype.shouldDisableSubmit = function () {
        var inviteToken = this.props.inviteToken;
        var _a = this.state, newInstance = _a.newInstance, errors = _a.errors;
        if (errors.pass || errors.repeatPass)
            return true;
        var name = newInstance.name, pass = newInstance.pass, repeatPass = newInstance.repeatPass;
        if (!inviteToken) {
            return !name;
        }
        if (this.isSettingPassword()) {
            return !repeatPass;
        }
        return !pass;
    };
    LoginView.prototype.onSubmit = function (url, payload) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, inviteToken, mode, resp, e_1, href;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.props, inviteToken = _a.inviteToken, mode = _a.mode;
                        if (this.shouldDisableSubmit())
                            return [2];
                        this.setState({
                            loading: true
                        });
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4, ajax_1.Ajax.query({ url: '$mount/' + url, data: payload })];
                    case 2:
                        resp = _b.sent();
                        return [3, 4];
                    case 3:
                        e_1 = _b.sent();
                        if (e_1.jsonError && e_1.jsonError.status && e_1.jsonError.status === 'REDIRECT' && e_1.jsonError.href) {
                            href = e_1.jsonError.href;
                            window.location.href = href;
                            return [2];
                        }
                        this.setState({
                            submitFail: 'Backend request failed',
                            loading: false
                        });
                        return [2];
                    case 4:
                        if (!resp || typeof resp.status !== 'string') {
                            this.setState({
                                submitFail: 'Invalid response',
                                loading: false
                            });
                            return [2];
                        }
                        if (inviteToken || mode === 'force-set-pass') {
                            window.history.replaceState(undefined, undefined, ajax_1.Ajax.mountPoint || '/');
                        }
                        switch (resp.status) {
                            case response_status_1.ResponseStatus.BAD_AUTH:
                                this.setState({
                                    submitFail: 'Invalid credentials',
                                    loading: false
                                });
                                break;
                            case response_status_1.ResponseStatus.OK:
                                window.location.reload();
                                break;
                            default:
                                this.setState({
                                    submitFail: 'Invalid response',
                                    loading: false
                                });
                                break;
                        }
                        return [2];
                }
            });
        });
    };
    LoginView.prototype.toggleRememberMe = function () {
        var rememberMe = this.state.rememberMe;
        this.setState({
            rememberMe: !rememberMe
        });
    };
    LoginView.prototype.isSettingPassword = function () {
        var _a = this.props, inviteToken = _a.inviteToken, mode = _a.mode;
        return inviteToken || mode === 'force-set-pass' || mode === 'welcome';
    };
    LoginView.prototype.renderCheckboxes = function () {
        var rememberMe = this.state.rememberMe;
        var showForgotPassword = false;
        return React.createElement("div", { className: "check-item" },
            React.createElement(caladan_1.Checkbox, { selected: rememberMe, onClick: this.toggleRememberMe.bind(this) }),
            React.createElement("span", { onClick: this.toggleRememberMe.bind(this) }, " Remember me"),
            showForgotPassword ? React.createElement("span", { className: "right-link" }, "Forgot password?") : null);
    };
    LoginView.prototype.renderPrimaryButton = function (title, submitUrl, payload) {
        var _this = this;
        var loading = this.state.loading;
        return React.createElement("div", { className: "button-bar" }, loading
            ? React.createElement(caladan_1.LoadingBar, { label: strings_1.STRINGS.loggingIn })
            : React.createElement(caladan_1.Button, { type: "primary", title: title, disabled: this.shouldDisableSubmit(), onClick: function () {
                    _this.onSubmit(submitUrl, payload);
                } }));
    };
    LoginView.prototype.renderPassFieldGroup = function () {
        var _a = this.state, newInstance = _a.newInstance, errors = _a.errors;
        var makeLabel = caladan_1.FormLabel.simpleGenerator(LABELS, errors);
        var makeTextInput = caladan_2.ImmutableTextInput.simpleGenerator(newInstance, this.delegate.onChange, LABELS, errors);
        return React.createElement("div", { className: "input-group" },
            this.isSettingPassword() ? makeLabel('pass', 'pass', React.createElement(caladan_1.InfoSpot, { bubbly: true, sourceIds: ['pass'] })) : caladan_1.FormLabel.dumbLabel(LABELS['pass'].label),
            makeTextInput('pass', this.checkPass, false, null, null, 'password'));
    };
    LoginView.prototype.renderRepeatPassFieldGroup = function () {
        var _a = this.state, newInstance = _a.newInstance, errors = _a.errors;
        var makeLabel = caladan_1.FormLabel.simpleGenerator(LABELS, errors);
        var makeTextInput = caladan_2.ImmutableTextInput.simpleGenerator(newInstance, this.delegate.onChange, LABELS, errors);
        return React.createElement("div", { className: "input-group" },
            makeLabel('repeatPass', 'repeatPass', React.createElement(caladan_1.InfoSpot, { bubbly: true, sourceIds: ['repeatPass'] })),
            makeTextInput('repeatPass', this.checkRepeatPass, false, null, null, 'password'));
    };
    LoginView.prototype.renderNameFieldGroup = function () {
        var userNameLabel = this.props.userNameLabel;
        var _a = this.state, newInstance = _a.newInstance, errors = _a.errors;
        var makeTextInput = caladan_2.ImmutableTextInput.simpleGenerator(newInstance, this.delegate.onChange, LABELS, errors);
        return React.createElement("div", { className: "input-group" },
            caladan_1.FormLabel.dumbLabel(userNameLabel || 'Email'),
            makeTextInput('name', this.checkUserName, true, null, null));
    };
    LoginView.prototype.renderSubmitFail = function () {
        var submitFail = this.state.submitFail;
        if (!submitFail)
            return null;
        return React.createElement("div", { className: "submit-fail" }, "Bad auth");
    };
    LoginView.prototype.renderTermsAndConditions = function () {
        var showTerms = this.props.showTerms;
        if (!showTerms)
            return null;
        var year = new Date().getFullYear();
        return React.createElement("div", { className: "terms" },
            React.createElement("a", { href: "https://imply.io/imply-software-license-terms", target: "_blank" }, strings_1.STRINGS.termsOfUse),
            ",",
            React.createElement("a", { href: "https://imply.io/privacy.html", target: "_blank" },
                " ",
                strings_1.STRINGS.privacyPolicy,
                " "),
            "\u00A9 ",
            year,
            " Imply Data, Inc.");
    };
    LoginView.prototype.getPassStrengthThing = function () {
        var passStrengthOpts = this.props.passStrengthOpts;
        return new pass_strength_1.PassStrenth(passStrengthOpts);
    };
    LoginView.prototype.renderForceSetPass = function () {
        var _a = this.props, userName = _a.userName, appName = _a.appName, mode = _a.mode;
        var newInstance = this.state.newInstance;
        var pass = newInstance.pass;
        if (mode !== 'force-set-pass')
            return null;
        var payload = { name: userName, pass: pass };
        var url = 'pass-reset';
        return [
            React.createElement("div", { className: "title-bar" },
                "Welcome ",
                userName),
            React.createElement("div", { className: "invite-user" },
                React.createElement("p", { className: "description" },
                    "Please select a password so that you can start using ",
                    appName,
                    " securely. The password must be at least ",
                    this.getPassStrengthThing().getMinLength(),
                    " characters long."),
                this.renderPassFieldGroup(),
                this.renderRepeatPassFieldGroup()),
            this.renderPrimaryButton(strings_1.STRINGS.login, url, payload),
            this.renderSubmitFail()
        ];
    };
    LoginView.prototype.renderInvite = function () {
        var _this = this;
        var _a = this.props, userName = _a.userName, appName = _a.appName, inviteToken = _a.inviteToken, accountId = _a.accountId;
        var newInstance = this.state.newInstance;
        var pass = newInstance.pass;
        if (!inviteToken)
            return null;
        var payload = { name: userName, pass: pass, token: inviteToken, accountId: accountId };
        var url = 'invite-user/accept';
        return [
            React.createElement(caladan_1.GlobalEventListener, { enter: function () { return _this.onSubmit(url, payload); } }),
            React.createElement("div", { className: "title-bar" },
                "Welcome ",
                userName),
            React.createElement("div", { className: "invite-user" },
                React.createElement("p", { className: "description" },
                    "Please select a password so that you can start using ",
                    appName,
                    " securely. The password must be at least ",
                    this.getPassStrengthThing().getMinLength(),
                    " characters long."),
                this.renderPassFieldGroup(),
                this.renderRepeatPassFieldGroup()),
            this.renderPrimaryButton(strings_1.STRINGS.login, url, payload),
            this.renderSubmitFail()
        ];
    };
    LoginView.prototype.renderWelcome = function () {
        var _this = this;
        var _a = this.props, appName = _a.appName, mode = _a.mode;
        var _b = this.state, newInstance = _b.newInstance, errors = _b.errors;
        var pass = newInstance.pass, firstName = newInstance.firstName, lastName = newInstance.lastName, name = newInstance.name;
        if (mode !== 'welcome')
            return null;
        var halfGrid = new caladan_1.Grid().setColumns([{ width: 50 }, { width: 50, hPadded: true }]);
        var makeTextInput = caladan_2.ImmutableTextInput.simpleGenerator(newInstance, this.delegate.onChange, LABELS, errors);
        var payload = { name: name, pass: pass, firstName: firstName, lastName: lastName };
        var url = 'welcome/create';
        return [
            React.createElement(caladan_1.GlobalEventListener, { enter: function () { return _this.onSubmit(url, payload); } }),
            React.createElement("div", { className: "title-bar" }, "Welcome to " + appName),
            React.createElement("p", { className: "description" },
                "Please create an account so you can start using ",
                appName,
                " securely. Your email will serve as your user id. The password must be at least ",
                this.getPassStrengthThing().getMinLength(),
                " characters long."),
            halfGrid.row([React.createElement("div", { className: "input-group" },
                    caladan_1.FormLabel.dumbLabel('First name'),
                    makeTextInput('firstName'))], [React.createElement("div", { className: "input-group" },
                    caladan_1.FormLabel.dumbLabel('Last name'),
                    makeTextInput('lastName'))]),
            this.renderNameFieldGroup(),
            this.renderPassFieldGroup(),
            this.renderRepeatPassFieldGroup(),
            this.renderPrimaryButton(strings_1.STRINGS.login, url, payload),
            this.renderSubmitFail()
        ];
    };
    LoginView.prototype.renderVanillaLogin = function () {
        var _this = this;
        var _a = this.props, appName = _a.appName, mode = _a.mode;
        var _b = this.state, newInstance = _b.newInstance, rememberMe = _b.rememberMe;
        var pass = newInstance.pass, name = newInstance.name;
        if (mode !== 'vanilla')
            return null;
        var payload = { name: name, pass: pass, rememberMe: rememberMe };
        var url = 'login';
        return [
            React.createElement(caladan_1.GlobalEventListener, { enter: function () { return _this.onSubmit(url, payload); } }),
            React.createElement("div", { className: "title-bar" }, "Login to " + appName),
            this.renderNameFieldGroup(),
            this.renderPassFieldGroup(),
            this.renderCheckboxes(),
            this.renderPrimaryButton(strings_1.STRINGS.login, url, payload),
            this.renderSubmitFail()
        ];
    };
    LoginView.prototype.renderAccountInput = function () {
        var _a = this.props, mainDomain = _a.mainDomain, mode = _a.mode;
        var _b = this.state, newInstance = _b.newInstance, errors = _b.errors;
        var accountName = newInstance.accountName;
        if (mode !== 'account-input')
            return null;
        var makeTextInput = caladan_2.ImmutableTextInput.simpleGenerator(newInstance, this.delegate.onChange, LABELS, errors);
        var grid = new caladan_1.Grid().setColumns([{ width: 50 }, { width: 50, hPadded: true }]);
        var onEnter = function () {
            var href = new beltful_1.ImmutableURL({
                protocol: location.protocol,
                hostname: accountName.toLowerCase() + '.' + mainDomain,
                port: location.port
            });
            window.location.href = href.toString();
            return;
        };
        return [
            React.createElement(caladan_1.GlobalEventListener, { enter: onEnter }),
            React.createElement("div", { className: "title-bar" }, "Go to your account"),
            grid.row([makeTextInput('accountName')], [React.createElement("span", { className: "main-domain" },
                    ".",
                    mainDomain)]),
            React.createElement("div", { className: "button-bar" },
                React.createElement(caladan_1.Button, { className: "account-input", type: "primary", title: strings_1.STRINGS.continue, disabled: !accountName, onClick: onEnter }))
        ];
    };
    LoginView.prototype.render = function () {
        return React.createElement("div", { className: "login-view" },
            React.createElement("div", { className: "center-modal" },
                this.renderWelcome(),
                this.renderInvite(),
                this.renderForceSetPass(),
                this.renderVanillaLogin(),
                this.renderAccountInput()),
            this.renderTermsAndConditions());
    };
    return LoginView;
}(React.Component));
exports.LoginView = LoginView;
