"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var immutable_class_1 = require("immutable-class");
var permission_1 = require("../permission/permission");
var Role = (function (_super) {
    tslib_1.__extends(Role, _super);
    function Role(parameters) {
        return _super.call(this, parameters) || this;
    }
    Role.fromJS = function (parameters) {
        if (parameters.name === Role.SUPER_ADMIN_NAME) {
            parameters.permissions = [];
        }
        return new Role(immutable_class_1.BaseImmutable.jsToValue(Role.PROPERTIES, parameters));
    };
    Role.prototype.isSuperAdmin = function () {
        return this.name === Role.SUPER_ADMIN_NAME;
    };
    Role.prototype.getNewPermission = function (possiblePermissions) {
        var firstDeduped = possiblePermissions ? possiblePermissions[0] : null;
        return new permission_1.Permission({
            name: firstDeduped ? firstDeduped.name : '',
            value: ''
        });
    };
    Role.prototype.updatePermission = function (permission) {
        var permissions = this.getPermissions();
        return this.changePermissions(immutable_class_1.NamedArray.overrideByName(permissions, permission));
    };
    Role.prototype.can = function (permission) {
        return this.getPermissions().some(function (p) { return p.name === permission; });
    };
    Role.SUPER_ADMIN_NAME = 'super-admin';
    Role.PROPERTIES = [
        { name: 'name' },
        { name: 'title', defaultValue: null },
        { name: 'permissions', immutableClassArray: permission_1.Permission, defaultValue: [], emptyArrayIsOk: true }
    ];
    return Role;
}(immutable_class_1.BaseImmutable));
exports.Role = Role;
immutable_class_1.BaseImmutable.finalize(Role);
Role.SUPER_ADMIN = new Role({
    name: Role.SUPER_ADMIN_NAME,
    title: 'Super Admin',
    permissions: []
});
