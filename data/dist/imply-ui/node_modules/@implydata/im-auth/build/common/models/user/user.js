"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var immutable_class_1 = require("immutable-class");
var strings_1 = require("../../strings");
var DEFAULT_ADMIN_NAME = 'admin@admin.com';
var DEFAULT_ADMIN_PROPERTIES = {
    name: DEFAULT_ADMIN_NAME,
    email: 'admin@admin.com',
    firstName: 'Default',
    lastName: 'Admin',
    roles: ['super-admin'],
    status: 'ok'
};
var User = (function (_super) {
    tslib_1.__extends(User, _super);
    function User(parameters) {
        var _this = _super.call(this, parameters) || this;
        _this.actualRoles = parameters.actualRoles;
        return _this;
    }
    User.fromJS = function (parameters, context) {
        if (context === void 0) { context = {}; }
        var id = parameters.id;
        if (id && !parameters.name) {
            parameters.name = id;
        }
        if (parameters.status === 'passwordReset')
            parameters.status = User.STATUS_OK;
        var value = immutable_class_1.BaseImmutable.jsToValue(User.PROPERTIES, parameters, User.BACK_COMPATS);
        if (context.actualRoles) {
            var roles_1 = value.roles || [];
            value.actualRoles = context.actualRoles.filter(function (role) { return roles_1.includes(role.name); });
        }
        return new User(value);
    };
    User.prototype.valueOf = function () {
        var value = _super.prototype.valueOf.call(this);
        value.actualRoles = this.actualRoles;
        return value;
    };
    User.prototype.getActualRoles = function () {
        var actualRoles = this.actualRoles;
        if (!actualRoles)
            throw new Error('must have actual roles');
        return actualRoles;
    };
    User.prototype.can = function (permission) {
        return this.getActualRoles().some(function (role) { return role.isSuperAdmin() || role.can(permission); });
    };
    User.prototype.attachActualRoles = function (actualRoles) {
        var value = this.valueOf();
        var roles = value.roles || [];
        value.actualRoles = actualRoles.filter(function (role) { return roles.includes(role.name); });
        return new User(value);
    };
    User.prototype.getStatusDisplay = function () {
        var status = this.getStatus();
        switch (status) {
            case User.STATUS_INVITATION_LINK:
                return strings_1.STRINGS.invitationLink;
            default:
                return strings_1.STRINGS.ok;
        }
    };
    User.prototype.getDisplayName = function () {
        var _a = this, firstName = _a.firstName, lastName = _a.lastName;
        if (firstName && lastName)
            return firstName + " " + lastName;
        return firstName || lastName || '???';
    };
    User.prototype.equalsByName = function (other) {
        if (!other)
            return false;
        return this.name === other.name;
    };
    User.STATUS_INVITATION_LINK = 'invitationLink';
    User.STATUS_NEEDS_TO_SET_PASS = 'needsToSetPass';
    User.STATUS_OK = 'ok';
    User.STATUSES = [User.STATUS_INVITATION_LINK, User.STATUS_OK, User.STATUS_NEEDS_TO_SET_PASS];
    User.SUPER_ADMIN_NAME = 'super-admin';
    User.BACK_COMPATS = [
        {
            condition: function (js) {
                return !js.roles && Boolean(js.permissionType);
            },
            action: function (js) {
                var oldValue = js.permissionType;
                js.roles = oldValue === 'admin' ? ['super-admin'] : ['user'];
            }
        }
    ];
    User.PROPERTIES = [
        { name: 'name' },
        { name: 'accountId', defaultValue: null },
        { name: 'email', defaultValue: null },
        { name: 'firstName', defaultValue: null },
        { name: 'lastName', defaultValue: null },
        { name: 'status', defaultValue: User.STATUS_OK, possibleValues: User.STATUSES },
        { name: 'roles', defaultValue: [], emptyArrayIsOk: true },
        { name: 'favorites', type: immutable_class_1.PropertyType.ARRAY }
    ];
    return User;
}(immutable_class_1.BaseImmutable));
exports.User = User;
immutable_class_1.BaseImmutable.finalize(User);
User.DEFAULT_ADMIN = new User(DEFAULT_ADMIN_PROPERTIES);
User.DEFAULT_ADMIN_NAME = User.DEFAULT_ADMIN.name;
